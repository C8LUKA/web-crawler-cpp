		Session.vim	/^nnoremap <buffer> 	 :call search('\\[[0-9]*:[^\\]]*\\]')$/;"	m
	Session.vim	/^nnoremap <buffer> <silent>   |:silent exec 'vertical resize '.(match(g:proj_flags, '\\Ct')!=-1 && winwidth('.') > g:proj_window_width?(g:proj_window_width):(winwidth('.') + g:proj_window_increment))$/;"	m
	Session.vim	/^nmap <silent>  o$/;"	m
o	Session.vim	/^nmap <silent> o <Plug>ProjectOnly$/;"	m
	Session.vim	/^nnoremap <buffer> <silent>  <Nop>$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
0	Session.vim	/^normal! 0$/;"	m
012l	Session.vim	/^normal! 012l$/;"	m
<2-RightMouse>	Session.vim	/^nmap <buffer> <silent> <2-RightMouse>  $/;"	m
<3-LeftMouse>	Session.vim	/^nnoremap <buffer> <silent> <3-LeftMouse> <Nop>$/;"	m
<3-RightMouse>	Session.vim	/^nmap <buffer> <silent> <3-RightMouse>  $/;"	m
<4-RightMouse>	Session.vim	/^nmap <buffer> <silent> <4-RightMouse>  $/;"	m
<C-2-LeftMouse>	Session.vim	/^nmap <buffer> <silent> <C-2-LeftMouse> <C-CR>$/;"	m
<C-Down>	Session.vim	/^noremap <C-Down> j$/;"	m
<C-Left>	Session.vim	/^noremap <C-Left> h$/;"	m
<C-LeftMouse>	Session.vim	/^nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>$/;"	m
<C-Right>	Session.vim	/^noremap <C-Right> l$/;"	m
<C-Up>	Session.vim	/^noremap <C-Up> k$/;"	m
<Down>	Session.vim	/^nnoremap <buffer> <Down> gj$/;"	m
<F1>	Session.vim	/^nnoremap <buffer> <F1> :let g:proj_doinghelp = 1$/;"	m
<M-2-LeftMouse>	Session.vim	/^nnoremap <buffer> <silent> <M-2-LeftMouse> ¬ç$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
<RightMouse>	Session.vim	/^nmap <buffer> <silent> <RightMouse>  $/;"	m
<S-LeftMouse>	Session.vim	/^nnoremap <buffer> <silent> <S-LeftMouse> <LeftMouse>$/;"	m
<S-Tab>	Session.vim	/^nnoremap <buffer> <S-Tab> :call search('\\[[0-9]*:[^\\]]*\\]','b')$/;"	m
<Up>	Session.vim	/^nnoremap <buffer> <Up> gk$/;"	m
ABSTRACT_CONTAINER_AVL_TREE_H_	util/btree-m/avl_tree.h	3;"	d
ABSTRACT_CONTAINER_SEARCH_TYPE_	util/btree-m/avl_tree.h	23;"	d
AddItem	util/btree-f/btree.cpp	/^void BTTableClass::AddItem(const ItemType & NewItem, long NewRight,$/;"	f	class:BTTableClass	signature:(const ItemType & NewItem, long NewRight, NodeType & Node, int Location)
AddItem	util/btree-f/btree.h	/^      void AddItem(const ItemType & NewItem, long NewRight,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & NewItem, long NewRight, NodeType & Node, int Location)
BASIC_LRU_H_	util/lru/Basic_LRU.h	9;"	d
BTTableClass	util/btree-f/btree.cpp	/^BTTableClass::BTTableClass(char Mode, const char * FileName) {$/;"	f	class:BTTableClass	signature:(char Mode, const char * FileName)
BTTableClass	util/btree-f/btree.h	/^      BTTableClass(char Mode, const char * FileName);$/;"	p	class:BTTableClass	access:public	signature:(char Mode, const char * FileName)
BTTableClass	util/btree-f/btree.h	/^class BTTableClass: public TableBaseClass$/;"	c	inherits:TableBaseClass
BTTableClass::AddItem	util/btree-f/btree.cpp	/^void BTTableClass::AddItem(const ItemType & NewItem, long NewRight,$/;"	f	class:BTTableClass	signature:(const ItemType & NewItem, long NewRight, NodeType & Node, int Location)
BTTableClass::AddItem	util/btree-f/btree.h	/^      void AddItem(const ItemType & NewItem, long NewRight,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & NewItem, long NewRight, NodeType & Node, int Location)
BTTableClass::BTTableClass	util/btree-f/btree.cpp	/^BTTableClass::BTTableClass(char Mode, const char * FileName) {$/;"	f	class:BTTableClass	signature:(char Mode, const char * FileName)
BTTableClass::BTTableClass	util/btree-f/btree.h	/^      BTTableClass(char Mode, const char * FileName);$/;"	p	class:BTTableClass	access:public	signature:(char Mode, const char * FileName)
BTTableClass::CurrentNode	util/btree-f/btree.h	/^      NodeType CurrentNode;   \/\/ storage for current node being worked on$/;"	m	class:BTTableClass	access:private
BTTableClass::Dump	util/btree-f/btree.cpp	/^void BTTableClass::Dump(void) {$/;"	f	class:BTTableClass	signature:(void)
BTTableClass::Dump	util/btree-f/btree.h	/^      void Dump(void);   \/\/ for debugging only - could be removed$/;"	p	class:BTTableClass	access:public	signature:(void)
BTTableClass::Empty	util/btree-f/btree.cpp	/^bool BTTableClass::Empty(void) { \/\/ we could read node zero, but this is faster:$/;"	f	class:BTTableClass	signature:(void)
BTTableClass::Empty	util/btree-f/btree.h	/^      bool Empty(void);$/;"	p	class:BTTableClass	access:public	signature:(void)
BTTableClass::Insert	util/btree-f/btree.cpp	/^bool BTTableClass::Insert(const ItemType & Item) {$/;"	f	class:BTTableClass	signature:(const ItemType & Item)
BTTableClass::Insert	util/btree-f/btree.h	/^      bool Insert(const ItemType & Item);$/;"	p	class:BTTableClass	access:public	signature:(const ItemType & Item)
BTTableClass::NodeSize	util/btree-f/btree.h	/^      int NodeSize;    \/\/ number of bytes per node$/;"	m	class:BTTableClass	access:private
BTTableClass::NumNodes	util/btree-f/btree.h	/^      long NumNodes;   \/\/ number of nodes in the B-tree$/;"	m	class:BTTableClass	access:private
BTTableClass::PushDown	util/btree-f/btree.cpp	/^bool BTTableClass::PushDown(const ItemType & CurrentItem, long CurrentRoot,$/;"	f	class:BTTableClass	signature:(const ItemType & CurrentItem, long CurrentRoot, bool & MoveUp, ItemType & NewItem, long & NewRight)
BTTableClass::PushDown	util/btree-f/btree.h	/^      bool PushDown(const ItemType & CurrentItem, long CurrentRoot,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & CurrentItem, long CurrentRoot, bool & MoveUp, ItemType & NewItem, long & NewRight)
BTTableClass::Retrieve	util/btree-f/btree.cpp	/^bool BTTableClass::Retrieve(long long SearchKey, ItemType & Item) {$/;"	f	class:BTTableClass	signature:(long long SearchKey, ItemType & Item)
BTTableClass::Retrieve	util/btree-f/btree.h	/^      bool Retrieve(long long SearchKey, ItemType & Item);$/;"	p	class:BTTableClass	access:public	signature:(long long SearchKey, ItemType & Item)
BTTableClass::Root	util/btree-f/btree.h	/^      long Root;       \/\/ fake pointer to the root node$/;"	m	class:BTTableClass	access:private
BTTableClass::SearchNode	util/btree-f/btree.cpp	/^bool BTTableClass::SearchNode(const long long Target, int & Location) const {$/;"	f	class:BTTableClass	signature:(const long long Target, int & Location) const
BTTableClass::SearchNode	util/btree-f/btree.h	/^      bool SearchNode(const long long Target, int & location) const;$/;"	p	class:BTTableClass	access:private	signature:(const long long Target, int & location) const
BTTableClass::Split	util/btree-f/btree.cpp	/^void BTTableClass::Split(const ItemType & CurrentItem, long CurrentRight,$/;"	f	class:BTTableClass	signature:(const ItemType & CurrentItem, long CurrentRight, long CurrentRoot, int Location, ItemType & NewItem, long & NewRight)
BTTableClass::Split	util/btree-f/btree.h	/^      void Split(const ItemType & CurrentItem, long CurrentRight,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & CurrentItem, long CurrentRight, long CurrentRoot, int Location, ItemType & NewItem, long & NewRight)
BTTableClass::bezero	util/btree-f/btree.h	/^      int bezero;\/\/‰∏∫‰∫ÜËÆ©Êï¥‰∏™Á±ªÁöÑÂ§ßÂ∞è‰∏∫20480Â≠óËäÇ$/;"	m	class:BTTableClass	access:private
BTTableClass::getPCurrentNode	util/btree-f/btree.cpp	/^void BTTableClass::getPCurrentNode(NodeType& nt){$/;"	f	class:BTTableClass	signature:(NodeType& nt)
BTTableClass::getPCurrentNode	util/btree-f/btree.h	/^      void getPCurrentNode(NodeType&);\/\/‰º†ÂºïÁî®$/;"	p	class:BTTableClass	access:public	signature:(NodeType&)
BTTableClass::makeSure	util/btree-f/btree.cpp	/^void BTTableClass::makeSure() {$/;"	f	class:BTTableClass	signature:()
BTTableClass::makeSure	util/btree-f/btree.h	/^      void makeSure();$/;"	p	class:BTTableClass	access:public	signature:()
BTTableClass::setCurrentNode	util/btree-f/btree.cpp	/^void BTTableClass::setCurrentNode(NodeType nt){$/;"	f	class:BTTableClass	signature:(NodeType nt)
BTTableClass::setCurrentNode	util/btree-f/btree.h	/^      void setCurrentNode(NodeType);$/;"	p	class:BTTableClass	access:public	signature:(NodeType)
BTTableClass::setNumItems	util/btree-f/btree.cpp	/^void BTTableClass::setNumItems(long size){$/;"	f	class:BTTableClass	signature:(long size)
BTTableClass::setNumItems	util/btree-f/btree.h	/^      void setNumItems(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
BTTableClass::setNumNodes	util/btree-f/btree.cpp	/^void BTTableClass::setNumNodes(long size){$/;"	f	class:BTTableClass	signature:(long size)
BTTableClass::setNumNodes	util/btree-f/btree.h	/^      void setNumNodes(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
BTTableClass::setRoot	util/btree-f/btree.cpp	/^void BTTableClass::setRoot(long  root){$/;"	f	class:BTTableClass	signature:(long root)
BTTableClass::setRoot	util/btree-f/btree.h	/^      void setRoot(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
BTTableClass::~BTTableClass	util/btree-f/btree.cpp	/^BTTableClass::~BTTableClass(void) {$/;"	f	class:BTTableClass	signature:(void)
BTTableClass::~BTTableClass	util/btree-f/btree.h	/^      ~BTTableClass(void);$/;"	p	class:BTTableClass	access:public	signature:(void)
Basic_LRU	util/lru/Basic_LRU.cpp	/^Basic_LRU::Basic_LRU(int num_cache) :$/;"	f	class:Basic_LRU	signature:(int num_cache)
Basic_LRU	util/lru/Basic_LRU.h	/^	Basic_LRU(int num_cache);$/;"	p	class:Basic_LRU	access:public	signature:(int num_cache)
Basic_LRU	util/lru/Basic_LRU.h	/^class Basic_LRU {$/;"	c
Basic_LRU::Basic_LRU	util/lru/Basic_LRU.cpp	/^Basic_LRU::Basic_LRU(int num_cache) :$/;"	f	class:Basic_LRU	signature:(int num_cache)
Basic_LRU::Basic_LRU	util/lru/Basic_LRU.h	/^	Basic_LRU(int num_cache);$/;"	p	class:Basic_LRU	access:public	signature:(int num_cache)
Basic_LRU::adjust_cache	util/lru/Basic_LRU.cpp	/^void Basic_LRU::adjust_cache(PCACHE_PAGE p) {$/;"	f	class:Basic_LRU	signature:(PCACHE_PAGE p)
Basic_LRU::adjust_cache	util/lru/Basic_LRU.h	/^	void adjust_cache(PCACHE_PAGE);$/;"	p	class:Basic_LRU	access:private	signature:(PCACHE_PAGE)
Basic_LRU::curr_num	util/lru/Basic_LRU.h	/^	int curr_num;$/;"	m	class:Basic_LRU	access:private
Basic_LRU::find_cache	util/lru/Basic_LRU.cpp	/^PCACHE_PAGE Basic_LRU::find_cache(long long int key)const {$/;"	f	class:Basic_LRU	signature:(long long int key) const
Basic_LRU::find_cache	util/lru/Basic_LRU.h	/^	PCACHE_PAGE find_cache(long long int key)const;$/;"	p	class:Basic_LRU	access:private	signature:(long long int key) const
Basic_LRU::getNum	util/lru/Basic_LRU.cpp	/^int Basic_LRU::getNum(){$/;"	f	class:Basic_LRU	signature:()
Basic_LRU::getNum	util/lru/Basic_LRU.h	/^	int getNum();$/;"	p	class:Basic_LRU	access:public	signature:()
Basic_LRU::head_pointer	util/lru/Basic_LRU.h	/^	PCACHE_PAGE head_pointer;$/;"	m	class:Basic_LRU	access:private
Basic_LRU::hit_cache	util/lru/Basic_LRU.cpp	/^bool Basic_LRU::hit_cache(long long int key) {$/;"	f	class:Basic_LRU	signature:(long long int key)
Basic_LRU::hit_cache	util/lru/Basic_LRU.h	/^	bool hit_cache(long long int key);$/;"	p	class:Basic_LRU	access:public	signature:(long long int key)
Basic_LRU::insert_cache	util/lru/Basic_LRU.cpp	/^long long int Basic_LRU::insert_cache(long long int k, int v) {$/;"	f	class:Basic_LRU	signature:(long long int k, int v)
Basic_LRU::insert_cache	util/lru/Basic_LRU.h	/^	long long int insert_cache(long long int k, int v);$/;"	p	class:Basic_LRU	access:public	signature:(long long int k, int v)
Basic_LRU::max_cache	util/lru/Basic_LRU.h	/^	const int max_cache;$/;"	m	class:Basic_LRU	access:private
Basic_LRU::tail_pointer	util/lru/Basic_LRU.h	/^	PCACHE_PAGE tail_pointer;$/;"	m	class:Basic_LRU	access:private
Basic_LRU::test	util/lru/Basic_LRU.cpp	/^void Basic_LRU::test() {$/;"	f	class:Basic_LRU	signature:()
Basic_LRU::test	util/lru/Basic_LRU.h	/^	void test();$/;"	p	class:Basic_LRU	access:public	signature:()
Basic_LRU::~Basic_LRU	util/lru/Basic_LRU.cpp	/^Basic_LRU::~Basic_LRU() {$/;"	f	class:Basic_LRU	signature:()
Basic_LRU::~Basic_LRU	util/lru/Basic_LRU.h	/^	~Basic_LRU();$/;"	p	class:Basic_LRU	access:public	signature:()
Branch	util/btree-f/btree.h	/^   long Branch[MaxKeysPlusOne];   \/\/ Fake pointers to child nodes$/;"	m	struct:__anon3	access:public
CACHE_PAGE	util/lru/Basic_LRU.h	/^}CACHE_PAGE, *PCACHE_PAGE;$/;"	t	typeref:struct:page
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/ContentSeen/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/DNS_Resolver/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/LinkExtractor/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/URLFilter/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/URLFrontier/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/URLSeen/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/Writer/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/protocolModule/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	component/ris/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/RabinHash/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/btree-f/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/btree-m/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/lru/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/rio/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/rwlock_fcfs/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_BINARY_DIR	util/thread_print/Makefile	/^CMAKE_BINARY_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/ContentSeen/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/DNS_Resolver/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/LinkExtractor/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/URLFilter/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/URLFrontier/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/URLSeen/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/Writer/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/protocolModule/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	component/ris/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/RabinHash/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/btree-f/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/btree-m/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/lru/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/rio/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/rwlock_fcfs/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	util/thread_print/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/ContentSeen/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/DNS_Resolver/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/LinkExtractor/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/URLFilter/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/URLFrontier/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/URLSeen/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/Writer/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/protocolModule/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	component/ris/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/RabinHash/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/btree-f/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/btree-m/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/lru/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/rio/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/rwlock_fcfs/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	util/thread_print/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/ContentSeen/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/DNS_Resolver/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/LinkExtractor/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/URLFilter/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/URLFrontier/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/URLSeen/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/Writer/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/protocolModule/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	component/ris/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/RabinHash/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/btree-f/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/btree-m/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/lru/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/rio/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/rwlock_fcfs/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
CMAKE_SOURCE_DIR	util/thread_print/Makefile	/^CMAKE_SOURCE_DIR = \/home\/luolei\/code\/crawler$/;"	m
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	31;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	42;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	39;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
CONTENTSEEN_H_	component/ContentSeen/ContentSeen.h	9;"	d
ContentSeen	component/ContentSeen/ContentSeen.cpp	/^ContentSeen::ContentSeen(int id) :$/;"	f	class:ContentSeen	signature:(int id)
ContentSeen	component/ContentSeen/ContentSeen.h	/^	ContentSeen(int id);$/;"	p	class:ContentSeen	access:public	signature:(int id)
ContentSeen	component/ContentSeen/ContentSeen.h	/^class ContentSeen {$/;"	c
ContentSeen::ContentSeen	component/ContentSeen/ContentSeen.cpp	/^ContentSeen::ContentSeen(int id) :$/;"	f	class:ContentSeen	signature:(int id)
ContentSeen::ContentSeen	component/ContentSeen/ContentSeen.h	/^	ContentSeen(int id);$/;"	p	class:ContentSeen	access:public	signature:(int id)
ContentSeen::NumItems	component/ContentSeen/ContentSeen.h	/^	long NumItems; \/\/ number of bytes per node$/;"	m	class:ContentSeen	access:private
ContentSeen::NumNodes	component/ContentSeen/ContentSeen.h	/^	long NumNodes; \/\/ number of nodes in the B-tree$/;"	m	class:ContentSeen	access:private
ContentSeen::Root	component/ContentSeen/ContentSeen.h	/^	long Root; \/\/ fake pointer to the root node$/;"	m	class:ContentSeen	access:private
ContentSeen::add	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::add(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
ContentSeen::add	component/ContentSeen/ContentSeen.h	/^	bool add(long long );$/;"	p	class:ContentSeen	access:public	signature:(long long )
ContentSeen::btree_f_write	component/ContentSeen/ContentSeen.h	/^	BTTableClass btree_f_write;$/;"	m	class:ContentSeen	access:private
ContentSeen::btree_m	component/ContentSeen/ContentSeen.h	/^	env btree_m;$/;"	m	class:ContentSeen	access:private
ContentSeen::check	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
ContentSeen::check	component/ContentSeen/ContentSeen.h	/^	bool check(long long);$/;"	p	class:ContentSeen	access:public	signature:(long long)
ContentSeen::check_f	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check_f(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
ContentSeen::check_f	component/ContentSeen/ContentSeen.h	/^	bool check_f(long long hash);$/;"	p	class:ContentSeen	access:private	signature:(long long hash)
ContentSeen::check_m	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check_m(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
ContentSeen::check_m	component/ContentSeen/ContentSeen.h	/^	bool check_m(long long hash);$/;"	p	class:ContentSeen	access:private	signature:(long long hash)
ContentSeen::filename	component/ContentSeen/ContentSeen.h	/^	string filename;$/;"	m	class:ContentSeen	access:private
ContentSeen::getLock_f_r	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_f_r() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::getLock_f_r	component/ContentSeen/ContentSeen.h	/^	bool getLock_f_r();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::getLock_f_w	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_f_w() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::getLock_f_w	component/ContentSeen/ContentSeen.h	/^	bool getLock_f_w();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::getLock_m_r	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_m_r() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::getLock_m_r	component/ContentSeen/ContentSeen.h	/^	bool getLock_m_r();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::getLock_m_w	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_m_w() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::getLock_m_w	component/ContentSeen/ContentSeen.h	/^	bool getLock_m_w();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::hash	component/ContentSeen/ContentSeen.cpp	/^long long ContentSeen::hash(char* doc, int size) {$/;"	f	class:ContentSeen	signature:(char* doc, int size)
ContentSeen::hash	component/ContentSeen/ContentSeen.h	/^	long long hash(char*, int);$/;"	p	class:ContentSeen	access:public	signature:(char*, int)
ContentSeen::m_counter	component/ContentSeen/ContentSeen.h	/^	int m_counter;$/;"	m	class:ContentSeen	access:private
ContentSeen::nodetype	component/ContentSeen/ContentSeen.h	/^	NodeType nodetype;$/;"	m	class:ContentSeen	access:private
ContentSeen::p_rwlock_f	component/ContentSeen/ContentSeen.h	/^	pthread_rwlock_t p_rwlock_f;$/;"	m	class:ContentSeen	access:private
ContentSeen::p_rwlock_m	component/ContentSeen/ContentSeen.h	/^	pthread_rwlock_t p_rwlock_m;$/;"	m	class:ContentSeen	access:private
ContentSeen::rabin	component/ContentSeen/ContentSeen.h	/^	RabinHashFunction64 rabin;$/;"	m	class:ContentSeen	access:private
ContentSeen::releaseLock_f	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::releaseLock_f() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::releaseLock_f	component/ContentSeen/ContentSeen.h	/^	bool releaseLock_f();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::releaseLock_m	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::releaseLock_m() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::releaseLock_m	component/ContentSeen/ContentSeen.h	/^	bool releaseLock_m();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::tid	component/ContentSeen/ContentSeen.h	/^	int tid;$/;"	m	class:ContentSeen	access:private
ContentSeen::write2file	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::write2file() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::write2file	component/ContentSeen/ContentSeen.h	/^	bool write2file();$/;"	p	class:ContentSeen	access:private	signature:()
ContentSeen::~ContentSeen	component/ContentSeen/ContentSeen.cpp	/^ContentSeen::~ContentSeen() {$/;"	f	class:ContentSeen	signature:()
ContentSeen::~ContentSeen	component/ContentSeen/ContentSeen.h	/^	~ContentSeen();$/;"	p	class:ContentSeen	access:public	signature:()
Count	util/btree-f/btree.h	/^   int Count;               \/\/ Number of keys stored in the current node$/;"	m	struct:__anon3	access:public
CurrentNode	util/btree-f/btree.h	/^      NodeType CurrentNode;   \/\/ storage for current node being worked on$/;"	m	class:BTTableClass	access:private
DEBUG	global.h	16;"	d
DEFAULT_IRREDUCIBLE_POLY	util/RabinHash/rabinhash64.h	/^	    static const long long DEFAULT_IRREDUCIBLE_POLY = 0x000000000000001BL;$/;"	m	class:RabinHashFunction64	access:private
DFMaxPlus1	util/btree-f/itemtype.h	/^const int DFMaxPlus1 = DataFieldMax + 1;$/;"	v
DMAX_BUFFER	global.h	44;"	d
DMAX_BUFFERPlus1	global.h	45;"	d
DMAX_HEAD	global.h	49;"	d
DNSCACHE	component/DNS_Resolver/TinyDNSResolver.h	/^	} DNSCACHE;$/;"	t	class:TinyDNSResolver	typeref:struct:TinyDNSResolver::__anon10	access:private
DNS_ADDR	component/DNS_Resolver/TinyDNSResolver.cpp	/^const char* TinyDNSResolver::DNS_ADDR[DNS_SERVERS] = {"202.97.224.69", "202.97.224.68"};$/;"	m	class:TinyDNSResolver	file:
DNS_ADDR	component/DNS_Resolver/TinyDNSResolver.h	/^	static const char*  DNS_ADDR[DNS_SERVERS];$/;"	m	class:TinyDNSResolver	access:private
DNS_PKG_HEADER	component/DNS_Resolver/TinyDNSResolver.h	/^} DNS_PKG_HEADER, *DNS_PKG_HEADER_PTR;$/;"	t	typeref:struct:__anon7
DNS_PKG_HEADER_PTR	component/DNS_Resolver/TinyDNSResolver.h	/^} DNS_PKG_HEADER, *DNS_PKG_HEADER_PTR;$/;"	t	typeref:struct:__anon7
DNS_PKG_QUERY	component/DNS_Resolver/TinyDNSResolver.h	/^} DNS_PKG_QUERY, *DNS_PKG_QUERY_PTR;$/;"	t	typeref:struct:__anon8
DNS_PKG_QUERY_PTR	component/DNS_Resolver/TinyDNSResolver.h	/^} DNS_PKG_QUERY, *DNS_PKG_QUERY_PTR;$/;"	t	typeref:struct:__anon8
DNS_PORT	component/DNS_Resolver/TinyDNSResolver.cpp	/^const int TinyDNSResolver::DNS_PORT = 53;$/;"	m	class:TinyDNSResolver	file:
DNS_PORT	component/DNS_Resolver/TinyDNSResolver.h	/^	static const int DNS_PORT;$/;"	m	class:TinyDNSResolver	access:private
DNS_RESPONSE_ANSWER	component/DNS_Resolver/TinyDNSResolver.h	/^}DNS_RESPONSE_ANSWER, *DNS_RESPONSE_ANSWER_PTR;$/;"	t	typeref:struct:__anon9
DNS_RESPONSE_ANSWER_PTR	component/DNS_Resolver/TinyDNSResolver.h	/^}DNS_RESPONSE_ANSWER, *DNS_RESPONSE_ANSWER_PTR;$/;"	t	typeref:struct:__anon9
DNS_SERVERS	component/DNS_Resolver/TinyDNSResolver.h	/^	enum{DNS_SERVERS= 2	};$/;"	e	enum:TinyDNSResolver::__anon11
DataField	util/btree-f/itemtype.h	/^   int DataField;$/;"	m	struct:__anon4	access:public
DataFieldMax	util/btree-f/itemtype.h	/^const int DataFieldMax = 36;$/;"	v
DataFieldType	util/btree-f/itemtype.h	/^typedef char DataFieldType[DFMaxPlus1];$/;"	t
DataFile	util/btree-f/table.h	/^      fstream DataFile;   \/\/ the file stream for the table data$/;"	m	class:TableBaseClass	access:protected
Dump	util/btree-f/btree.cpp	/^void BTTableClass::Dump(void) {$/;"	f	class:BTTableClass	signature:(void)
Dump	util/btree-f/btree.h	/^      void Dump(void);   \/\/ for debugging only - could be removed$/;"	p	class:BTTableClass	access:public	signature:(void)
EQUAL	util/btree-m/avl_tree.h	/^    EQUAL = 1,$/;"	e	enum:abstract_container::search_type
Empty	util/btree-f/btree.cpp	/^bool BTTableClass::Empty(void) { \/\/ we could read node zero, but this is faster:$/;"	f	class:BTTableClass	signature:(void)
Empty	util/btree-f/btree.h	/^      bool Empty(void);$/;"	p	class:BTTableClass	access:public	signature:(void)
Empty	util/btree-f/table.h	/^      virtual bool Empty(void) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(void)
Error	util/btree-f/btree.cpp	/^void Error(char * msg) {$/;"	f	signature:(char * msg)
Error	util/btree-f/btree.h	/^void Error(char * msg);$/;"	p	signature:(char * msg)
GLOBAL_H_	global.h	11;"	d
GREATER	util/btree-m/avl_tree.h	/^    GREATER = 4,$/;"	e	enum:abstract_container::search_type
GREATER_EQUAL	util/btree-m/avl_tree.h	/^    GREATER_EQUAL = EQUAL | GREATER$/;"	e	enum:abstract_container::search_type
HASH_SEED	global.cpp	/^const int HASH_SEED = 1;$/;"	v
HTTPMODULE_H_	component/protocolModule/HttpModule.h	9;"	d
HttpModule	component/protocolModule/HttpModule.cpp	/^HttpModule::HttpModule(int id) :$/;"	f	class:HttpModule	signature:(int id)
HttpModule	component/protocolModule/HttpModule.h	/^	HttpModule(int);$/;"	p	class:HttpModule	access:public	signature:(int)
HttpModule	component/protocolModule/HttpModule.h	/^class HttpModule {$/;"	c
HttpModule::HttpModule	component/protocolModule/HttpModule.cpp	/^HttpModule::HttpModule(int id) :$/;"	f	class:HttpModule	signature:(int id)
HttpModule::HttpModule	component/protocolModule/HttpModule.h	/^	HttpModule(int);$/;"	p	class:HttpModule	access:public	signature:(int)
HttpModule::NOTRETURN	component/protocolModule/HttpModule.h	/^		NOTRETURN,\/\/Á∫øÁ®ãËøòÊ≤°ÊúâËøîÂõûÁªìÊûú$/;"	e	enum:HttpModule::__anon5
HttpModule::RETURN_FALSE	component/protocolModule/HttpModule.h	/^		RETURN_FALSE\/\/Á∫øÁ®ãÂ∑•‰ΩúÁªìÊùüËøîÂõûfalse$/;"	e	enum:HttpModule::__anon5
HttpModule::RETURN_TRUE	component/protocolModule/HttpModule.h	/^		RETURN_TRUE,\/\/Á∫øÁ®ãÂ∑•‰ΩúÁªìÊùüÂπ∂ËøîÂõûtrue$/;"	e	enum:HttpModule::__anon5
HttpModule::cond_fetch	component/protocolModule/HttpModule.h	/^	pthread_cond_t cond_fetch;$/;"	m	class:HttpModule	access:private
HttpModule::fetch	component/protocolModule/HttpModule.cpp	/^bool HttpModule::fetch(struct page_link pl, char* buffer, char* bigbuf, int tid) {$/;"	f	class:HttpModule	signature:(struct page_link pl, char* buffer, char* bigbuf, int tid)
HttpModule::fetch	component/protocolModule/HttpModule.h	/^	bool fetch(struct page_link pl, char* buffer, char* bigbuf, int tid);$/;"	p	class:HttpModule	access:public	signature:(struct page_link pl, char* buffer, char* bigbuf, int tid)
HttpModule::getIP	component/protocolModule/HttpModule.cpp	/^char* HttpModule::getIP(){$/;"	f	class:HttpModule	signature:()
HttpModule::getIP	component/protocolModule/HttpModule.h	/^	char* getIP();$/;"	p	class:HttpModule	access:public	signature:()
HttpModule::ip	component/protocolModule/HttpModule.h	/^	char ip[16];$/;"	m	class:HttpModule	access:private
HttpModule::mutex_fetch	component/protocolModule/HttpModule.h	/^	pthread_mutex_t mutex_fetch;$/;"	m	class:HttpModule	access:private
HttpModule::server_addr	component/protocolModule/HttpModule.h	/^	struct sockaddr_in server_addr;$/;"	m	class:HttpModule	typeref:struct:HttpModule::sockaddr_in	access:private
HttpModule::sockfd	component/protocolModule/HttpModule.h	/^	int sockfd;$/;"	m	class:HttpModule	access:private
HttpModule::threadtofetch	component/protocolModule/HttpModule.cpp	/^void* HttpModule::threadtofetch(void* p_attr) {$/;"	f	class:HttpModule	signature:(void* p_attr)
HttpModule::threadtofetch	component/protocolModule/HttpModule.h	/^	void* threadtofetch(void*);$/;"	p	class:HttpModule	access:public	signature:(void*)
HttpModule::tid	component/protocolModule/HttpModule.h	/^	int tid;$/;"	m	class:HttpModule	access:private
HttpModule::tp	component/protocolModule/HttpModule.h	/^	Thread_print tp;\/\/Á∫øÁ®ãÊâìÂç∞Âà∞Êñá‰ª∂$/;"	m	class:HttpModule	access:private
HttpModule::tr	component/protocolModule/HttpModule.h	/^	TinyDNSResolver tr;$/;"	m	class:HttpModule	access:private
HttpModule::~HttpModule	component/protocolModule/HttpModule.cpp	/^HttpModule::~HttpModule() {$/;"	f	class:HttpModule	signature:()
HttpModule::~HttpModule	component/protocolModule/HttpModule.h	/^	~HttpModule();$/;"	p	class:HttpModule	access:public	signature:()
ID_VOID_MAIN	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IP_NOISE_MESSAGE_BUFSIZE	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	10;"	d
Insert	util/btree-f/btree.cpp	/^bool BTTableClass::Insert(const ItemType & Item) {$/;"	f	class:BTTableClass	signature:(const ItemType & Item)
Insert	util/btree-f/btree.h	/^      bool Insert(const ItemType & Item);$/;"	p	class:BTTableClass	access:public	signature:(const ItemType & Item)
Insert	util/btree-f/table.h	/^      virtual bool Insert(const ItemType & Item) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(const ItemType & Item)
ItemType	util/btree-f/itemtype.h	/^   } ItemType;$/;"	t	typeref:struct:__anon4
KFMaxPlus1	util/btree-f/itemtype.h	/^const int KFMaxPlus1 = KeyFieldMax + 1;$/;"	v
KV	util/btree-m/avl_ex1.cpp	/^}KV;$/;"	t	typeref:struct:__anon2	file:
Key	util/btree-f/btree.h	/^   ItemType Key[MaxKeys];   \/\/ Warning: indexing starts at 0, not 1$/;"	m	struct:__anon3	access:public
KeyField	util/btree-f/itemtype.h	/^   long long KeyField;$/;"	m	struct:__anon4	access:public
KeyFieldMax	util/btree-f/itemtype.h	/^const int KeyFieldMax = 12;$/;"	v
KeyFieldType	util/btree-f/itemtype.h	/^typedef char KeyFieldType[KFMaxPlus1];$/;"	t
LESS	util/btree-m/avl_tree.h	/^    LESS = 2,$/;"	e	enum:abstract_container::search_type
LESS_EQUAL	util/btree-m/avl_tree.h	/^    LESS_EQUAL = EQUAL | LESS,$/;"	e	enum:abstract_container::search_type
LINKEXTRACTOR_H_	component/LinkExtractor/LinkExtractor.h	9;"	d
LRUCacher	component/URLSeen/URLSeen.h	/^	Basic_LRU LRUCacher;$/;"	m	class:URLSeen	access:private
LRU_KV	util/lru/Basic_LRU.h	/^}LRU_KV,*PLRU_KV;$/;"	t	typeref:struct:__anon1
LinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^LinkExtractor::LinkExtractor() {$/;"	f	class:LinkExtractor	signature:()
LinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	LinkExtractor();$/;"	p	class:LinkExtractor	access:public	signature:()
LinkExtractor	component/LinkExtractor/LinkExtractor.h	/^class LinkExtractor {$/;"	c
LinkExtractor::LinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^LinkExtractor::LinkExtractor() {$/;"	f	class:LinkExtractor	signature:()
LinkExtractor::LinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	LinkExtractor();$/;"	p	class:LinkExtractor	access:public	signature:()
LinkExtractor::URLanalyser	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::URLanalyser(struct page_link* plPtr, char* src) {$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* src)
LinkExtractor::URLanalyser	component/LinkExtractor/LinkExtractor.h	/^	bool URLanalyser(struct page_link*, char*);\/\/ÈíàÂØπ‰∏Ä‰∏™ÁªôÂÆöÁöÑÁªùÂØπurlÂ∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link*, char*)
LinkExtractor::clearself	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::clearself() {$/;"	f	class:LinkExtractor	signature:()
LinkExtractor::clearself	component/LinkExtractor/LinkExtractor.h	/^	bool clearself();\/\/ÈíàÂØπÊØè‰∏Ä‰∏™ÁΩëÈ°µÊèêÂèñÂÆåÊâÄÊúâË∂ÖÈìæÊé•ÂêéÂøÖÈ°ªÈáäÊîæ$/;"	p	class:LinkExtractor	access:public	signature:()
LinkExtractor::currPage_link	component/LinkExtractor/LinkExtractor.h	/^	struct page_link* currPage_link;$/;"	m	class:LinkExtractor	typeref:struct:LinkExtractor::page_link	access:private
LinkExtractor::currPtr	component/LinkExtractor/LinkExtractor.h	/^	char* currPtr;\/\/ÊåáÂêëÂ≠òÊîæÁΩëÈ°µÁöÑÂÜÖÂ≠ò$/;"	m	class:LinkExtractor	access:private
LinkExtractor::fixURL	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::fixURL(struct page_link* plPtr, char* url) {$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* url)
LinkExtractor::fixURL	component/LinkExtractor/LinkExtractor.h	/^	bool fixURL(struct page_link*plptr, char*url);\/\/ÈíàÂØπ‰∏Ä‰∏™urlÔºàÂèØËÉΩÊòØÁõ∏ÂØπÁöÑ‰πüÂèØËÉΩÊòØÁªùÂØπÁöÑÔºâÔºåÊ≠£Á°ÆÂ∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:private	signature:(struct page_link*plptr, char*url)
LinkExtractor::getLink	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::getLink(struct page_link* pl) {$/;"	f	class:LinkExtractor	signature:(struct page_link* pl)
LinkExtractor::getLink	component/LinkExtractor/LinkExtractor.h	/^	bool getLink(struct page_link* pl) ;\/\/ÊèêÂèñ‰∏Ä‰∏™Ë∂ÖÈìæÊé•Âπ∂Â∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link* pl)
LinkExtractor::initLinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::initLinkExtractor(struct page_link* plPtr, char* p,$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* p, int size)
LinkExtractor::initLinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	bool initLinkExtractor(struct page_link* ,char*, int);\/\/ÂàùÂßãÂåñ$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link* ,char*, int)
LinkExtractor::min	component/LinkExtractor/LinkExtractor.h	/^	inline int min(int a , int b){return a>b? b: a;}$/;"	f	class:LinkExtractor	access:private	signature:(int a , int b)
LinkExtractor::num	component/LinkExtractor/LinkExtractor.h	/^	int num;\/\/ÂÜÖÂ≠òÂ§ßÂ∞è$/;"	m	class:LinkExtractor	access:private
LinkExtractor::regex	component/LinkExtractor/LinkExtractor.h	/^	regex_t regex;$/;"	m	class:LinkExtractor	access:private
LinkExtractor::~LinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^LinkExtractor::~LinkExtractor() {$/;"	f	class:LinkExtractor	signature:()
LinkExtractor::~LinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	~LinkExtractor();$/;"	p	class:LinkExtractor	access:public	signature:()
MAX_BUFFER	global.cpp	/^const int MAX_BUFFER = 512* 1024 - 1 ;$/;"	v
MAX_BUFFERPlus1	global.cpp	/^const int MAX_BUFFERPlus1 = MAX_BUFFER + 1;$/;"	v
MAX_DOC	global.cpp	/^const int MAX_DOC = 800;$/;"	v
MAX_FILTER	component/URLFilter/URLFilter.h	/^	enum{MAX_FILTER=20};$/;"	e	enum:URLFilter::__anon6
MAX_HEAD	global.cpp	/^const int MAX_HEAD = 512 - 1;$/;"	v
MAX_HEADPlus1	global.cpp	/^const int MAX_HEADPlus1 = MAX_HEAD + 1;$/;"	v
MAX_LRU	global.cpp	/^const int MAX_LRU = 150;$/;"	v
MAX_THREAD	global.cpp	/^const int MAX_THREAD = 1;$/;"	v
MAX_URL	global.cpp	/^const int MAX_URL = 1000;$/;"	v
MaxKeys	util/btree-f/btree.h	/^const int MaxKeys = 1260;\/\/108;   \/\/ max number of keys in a node$/;"	v
MaxKeysPlusOne	util/btree-f/btree.h	/^const int MaxKeysPlusOne = MaxKeys + 1;$/;"	v
MinKeys	util/btree-f/btree.h	/^const int MinKeys = 5;    \/\/ min number of keys in a node$/;"	v
NOTRETURN	component/protocolModule/HttpModule.h	/^		NOTRETURN,\/\/Á∫øÁ®ãËøòÊ≤°ÊúâËøîÂõûÁªìÊûú$/;"	e	enum:HttpModule::__anon5
NUM_URL2FILE	global.cpp	/^const int NUM_URL2FILE = 900;$/;"	v
NUM_URL2MEMERY	global.cpp	/^const int NUM_URL2MEMERY = 100;$/;"	v
NilPtr	util/btree-f/btree.h	/^const long NilPtr = -1L;   \/\/ the L indicates a long int$/;"	v
NodeSize	util/btree-f/btree.h	/^      int NodeSize;    \/\/ number of bytes per node$/;"	m	class:BTTableClass	access:private
NodeType	util/btree-f/btree.h	/^   } NodeType;$/;"	t	typeref:struct:__anon3
NumItems	component/ContentSeen/ContentSeen.h	/^	long NumItems; \/\/ number of bytes per node$/;"	m	class:ContentSeen	access:private
NumItems	component/URLSeen/URLSeen.h	/^	long NumItems; \/\/ number of bytes per node$/;"	m	class:URLSeen	access:private
NumItems	util/btree-f/table.h	/^      long NumItems;      \/\/ number of records in the table$/;"	m	class:TableBaseClass	access:protected
NumNodes	component/ContentSeen/ContentSeen.h	/^	long NumNodes; \/\/ number of nodes in the B-tree$/;"	m	class:ContentSeen	access:private
NumNodes	component/URLSeen/URLSeen.h	/^	long NumNodes; \/\/ number of nodes in the B-tree$/;"	m	class:URLSeen	access:private
NumNodes	util/btree-f/btree.h	/^      long NumNodes;   \/\/ number of nodes in the B-tree$/;"	m	class:BTTableClass	access:private
OpenMode	util/btree-f/table.h	/^      char OpenMode;      \/\/ r or w (read or write) mode for the table$/;"	m	class:TableBaseClass	access:protected
P	util/RabinHash/rabinhash64.h	/^	     long long P;$/;"	m	class:RabinHashFunction64	access:private
PCACHE_PAGE	util/lru/Basic_LRU.h	/^}CACHE_PAGE, *PCACHE_PAGE;$/;"	t	typeref:struct:page
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	95;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	86;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
PLRU_KV	util/lru/Basic_LRU.h	/^}LRU_KV,*PLRU_KV;$/;"	t	typeref:struct:__anon1
PTHREAD_RWLOCK_FCFS_DEBUG_ARGS	util/rwlock_fcfs/pthread/rwlock_fcfs.h	65;"	d
PTHREAD_RWLOCK_FCFS_DEBUG_ARGS	util/rwlock_fcfs/pthread/rwlock_fcfs.h	68;"	d
PTHREAD_RWLOCK_FCFS_DEBUG_CALL_ARGS	util/rwlock_fcfs/pthread/rwlock_fcfs.h	66;"	d
PTHREAD_RWLOCK_FCFS_DEBUG_CALL_ARGS	util/rwlock_fcfs/pthread/rwlock_fcfs.h	69;"	d
PTHREAD_RWLOCK_FCFS_UNLOCKED	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    PTHREAD_RWLOCK_FCFS_UNLOCKED,$/;"	e	enum:pthread_rwlock_fcfs_status
PTHREAD_RWLOCK_FCFS_USED_BY_A_WRITER	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    PTHREAD_RWLOCK_FCFS_USED_BY_A_WRITER,$/;"	e	enum:pthread_rwlock_fcfs_status
PTHREAD_RWLOCK_FCFS_USED_BY_READERS	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    PTHREAD_RWLOCK_FCFS_USED_BY_READERS,$/;"	e	enum:pthread_rwlock_fcfs_status
P_DEGREE	util/RabinHash/rabinhash64.h	/^	    static const int P_DEGREE = 64;$/;"	m	class:RabinHashFunction64	access:private
PushDown	util/btree-f/btree.cpp	/^bool BTTableClass::PushDown(const ItemType & CurrentItem, long CurrentRoot,$/;"	f	class:BTTableClass	signature:(const ItemType & CurrentItem, long CurrentRoot, bool & MoveUp, ItemType & NewItem, long & NewRight)
PushDown	util/btree-f/btree.h	/^      bool PushDown(const ItemType & CurrentItem, long CurrentRoot,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & CurrentItem, long CurrentRoot, bool & MoveUp, ItemType & NewItem, long & NewRight)
Q	Session.vim	/^map Q gq$/;"	m
RABINHASH64_H_	util/RabinHash/rabinhash64.h	36;"	d
READ_BUFFER_SIZE	util/RabinHash/rabinhash64.h	/^	    static const int READ_BUFFER_SIZE = 1024;$/;"	m	class:RabinHashFunction64	access:private
RETURN_FALSE	component/protocolModule/HttpModule.h	/^		RETURN_FALSE\/\/Á∫øÁ®ãÂ∑•‰ΩúÁªìÊùüËøîÂõûfalse$/;"	e	enum:HttpModule::__anon5
RETURN_TRUE	component/protocolModule/HttpModule.h	/^		RETURN_TRUE,\/\/Á∫øÁ®ãÂ∑•‰ΩúÁªìÊùüÂπ∂ËøîÂõûtrue$/;"	e	enum:HttpModule::__anon5
RIO_H_	util/rio/rio.h	11;"	d
RIS	component/ris/ris.cpp	/^RIS::RIS(){$/;"	f	class:RIS	signature:()
RIS	component/ris/ris.h	/^	RIS();$/;"	p	class:RIS	access:public	signature:()
RIS	component/ris/ris.h	/^class RIS {$/;"	c
RIS::RIS	component/ris/ris.cpp	/^RIS::RIS(){$/;"	f	class:RIS	signature:()
RIS::RIS	component/ris/ris.h	/^	RIS();$/;"	p	class:RIS	access:public	signature:()
RIS::clearself	component/ris/ris.cpp	/^void RIS::clearself(){$/;"	f	class:RIS	signature:()
RIS::clearself	component/ris/ris.h	/^	void clearself();$/;"	p	class:RIS	access:public	signature:()
RIS::curptr	component/ris/ris.h	/^	char* curptr;$/;"	m	class:RIS	access:private
RIS::fileBuffer	component/ris/ris.h	/^	char fileBuffer[DMAX_BUFFER+1];$/;"	m	class:RIS	access:private
RIS::fillBuffer	component/ris/ris.cpp	/^bool RIS::fillBuffer(char* b, const int size ){$/;"	f	class:RIS	signature:(char* b, const int size )
RIS::fillBuffer	component/ris/ris.h	/^	bool fillBuffer(char* b, const int size = MAX_BUFFER);$/;"	p	class:RIS	access:public	signature:(char* b, const int size = MAX_BUFFER)
RIS::getHead	component/ris/ris.cpp	/^char* RIS::getHead(){$/;"	f	class:RIS	signature:()
RIS::getHead	component/ris/ris.h	/^	char* getHead();$/;"	p	class:RIS	access:public	signature:()
RIS::getPtr	component/ris/ris.cpp	/^char* RIS::getPtr(){$/;"	f	class:RIS	signature:()
RIS::getPtr	component/ris/ris.h	/^	char* getPtr();$/;"	p	class:RIS	access:public	signature:()
RIS::headBuffer	component/ris/ris.h	/^	char headBuffer[DMAX_HEAD];$/;"	m	class:RIS	access:private
RIS::rewindPtr	component/ris/ris.cpp	/^void RIS::rewindPtr(){$/;"	f	class:RIS	signature:()
RIS::rewindPtr	component/ris/ris.h	/^	void rewindPtr(void);$/;"	p	class:RIS	access:public	signature:(void)
RIS::~RIS	component/ris/ris.cpp	/^RIS::~RIS(){$/;"	f	class:RIS	signature:()
RIS::~RIS	component/ris/ris.h	/^	~RIS();$/;"	p	class:RIS	access:public	signature:()
RIS_H_	component/ris/ris.h	15;"	d
RM	Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/ContentSeen/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/DNS_Resolver/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/LinkExtractor/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/URLFilter/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/URLFrontier/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/URLSeen/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/Writer/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/protocolModule/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	component/ris/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/RabinHash/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/btree-f/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/btree-m/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/lru/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/rio/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/rwlock_fcfs/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	util/thread_print/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::RabinHashFunction64():P(HASH_SEED){}$/;"	f	class:RabinHashFunction64	signature:()
RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::RabinHashFunction64(const long long _P) :$/;"	f	class:RabinHashFunction64	signature:(const long long _P)
RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	RabinHashFunction64();$/;"	p	class:RabinHashFunction64	access:public	signature:()
RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	RabinHashFunction64(const long long _P);$/;"	p	class:RabinHashFunction64	access:public	signature:(const long long _P)
RabinHashFunction64	util/RabinHash/rabinhash64.h	/^class RabinHashFunction64{$/;"	c
RabinHashFunction64::DEFAULT_IRREDUCIBLE_POLY	util/RabinHash/rabinhash64.h	/^	    static const long long DEFAULT_IRREDUCIBLE_POLY = 0x000000000000001BL;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::P	util/RabinHash/rabinhash64.h	/^	     long long P;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::P_DEGREE	util/RabinHash/rabinhash64.h	/^	    static const int P_DEGREE = 64;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::READ_BUFFER_SIZE	util/RabinHash/rabinhash64.h	/^	    static const int READ_BUFFER_SIZE = 1024;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::RabinHashFunction64():P(HASH_SEED){}$/;"	f	class:RabinHashFunction64	signature:()
RabinHashFunction64::RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::RabinHashFunction64(const long long _P) :$/;"	f	class:RabinHashFunction64	signature:(const long long _P)
RabinHashFunction64::RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	RabinHashFunction64();$/;"	p	class:RabinHashFunction64	access:public	signature:()
RabinHashFunction64::RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	RabinHashFunction64(const long long _P);$/;"	p	class:RabinHashFunction64	access:public	signature:(const long long _P)
RabinHashFunction64::X_P_DEGREE	util/RabinHash/rabinhash64.h	/^	    static const long long  X_P_DEGREE = 1LL << (P_DEGREE - 1);$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::computeWShifted	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::computeWShifted(const long long w) {$/;"	f	class:RabinHashFunction64	signature:(const long long w)
RabinHashFunction64::computeWShifted	util/RabinHash/rabinhash64.h	/^	    long long computeWShifted(const long long w);$/;"	p	class:RabinHashFunction64	access:private	signature:(const long long w)
RabinHashFunction64::getP	util/RabinHash/rabinhash64.cpp	/^const long long RabinHashFunction64::getP() {$/;"	f	class:RabinHashFunction64	signature:()
RabinHashFunction64::getP	util/RabinHash/rabinhash64.h	/^	const long long getP();$/;"	p	class:RabinHashFunction64	access:public	signature:()
RabinHashFunction64::hash	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::hash(const char A[], const int offset,$/;"	f	class:RabinHashFunction64	signature:(const char A[], const int offset, const int length, long long w)
RabinHashFunction64::hash	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::hash(const char A[], const int size) {$/;"	f	class:RabinHashFunction64	signature:(const char A[], const int size)
RabinHashFunction64::hash	util/RabinHash/rabinhash64.h	/^	long long hash(const char A[], const int offset, const int length, long long w);$/;"	p	class:RabinHashFunction64	access:public	signature:(const char A[], const int offset, const int length, long long w)
RabinHashFunction64::hash	util/RabinHash/rabinhash64.h	/^	long long hash(const char A[], const int size);$/;"	p	class:RabinHashFunction64	access:public	signature:(const char A[], const int size)
RabinHashFunction64::initializeTables	util/RabinHash/rabinhash64.cpp	/^void RabinHashFunction64::initializeTables() {$/;"	f	class:RabinHashFunction64	signature:()
RabinHashFunction64::initializeTables	util/RabinHash/rabinhash64.h	/^	    void initializeTables();$/;"	p	class:RabinHashFunction64	access:private	signature:()
RabinHashFunction64::table32	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table40	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table48	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table56	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table64	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table72	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table80	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::table88	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
RabinHashFunction64::~RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::~RabinHashFunction64() {$/;"	f	class:RabinHashFunction64	signature:()
RabinHashFunction64::~RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	~RabinHashFunction64();$/;"	p	class:RabinHashFunction64	access:public	signature:()
Retrieve	util/btree-f/btree.cpp	/^bool BTTableClass::Retrieve(long long SearchKey, ItemType & Item) {$/;"	f	class:BTTableClass	signature:(long long SearchKey, ItemType & Item)
Retrieve	util/btree-f/btree.h	/^      bool Retrieve(long long SearchKey, ItemType & Item);$/;"	p	class:BTTableClass	access:public	signature:(long long SearchKey, ItemType & Item)
Retrieve	util/btree-f/table.h	/^      virtual bool Retrieve(long long SearchKey, ItemType & Item) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(long long SearchKey, ItemType & Item)
Root	component/ContentSeen/ContentSeen.h	/^	long Root; \/\/ fake pointer to the root node$/;"	m	class:ContentSeen	access:private
Root	component/URLSeen/URLSeen.h	/^	long Root; \/\/ fake pointer to the root node$/;"	m	class:URLSeen	access:private
Root	util/btree-f/btree.h	/^      long Root;       \/\/ fake pointer to the root node$/;"	m	class:BTTableClass	access:private
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/ContentSeen/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/DNS_Resolver/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/LinkExtractor/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/URLFilter/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/URLFrontier/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/URLSeen/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/Writer/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/protocolModule/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	component/ris/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/RabinHash/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/btree-f/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/btree-m/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/lru/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/rio/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/rwlock_fcfs/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	util/thread_print/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/ContentSeen/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/DNS_Resolver/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/LinkExtractor/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/URLFilter/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/URLFrontier/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/URLSeen/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/Writer/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/protocolModule/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	component/ris/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/RabinHash/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/btree-f/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/btree-m/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/lru/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/rio/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/rwlock_fcfs/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	util/thread_print/Makefile	/^SUFFIXES =$/;"	m
SearchNode	util/btree-f/btree.cpp	/^bool BTTableClass::SearchNode(const long long Target, int & Location) const {$/;"	f	class:BTTableClass	signature:(const long long Target, int & Location) const
SearchNode	util/btree-f/btree.h	/^      bool SearchNode(const long long Target, int & location) const;$/;"	p	class:BTTableClass	access:private	signature:(const long long Target, int & location) const
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
Split	util/btree-f/btree.cpp	/^void BTTableClass::Split(const ItemType & CurrentItem, long CurrentRight,$/;"	f	class:BTTableClass	signature:(const ItemType & CurrentItem, long CurrentRight, long CurrentRoot, int Location, ItemType & NewItem, long & NewRight)
Split	util/btree-f/btree.h	/^      void Split(const ItemType & CurrentItem, long CurrentRight,$/;"	p	class:BTTableClass	access:private	signature:(const ItemType & CurrentItem, long CurrentRight, long CurrentRoot, int Location, ItemType & NewItem, long & NewRight)
TINYDNSRESOLVER_H_	component/DNS_Resolver/TinyDNSResolver.h	9;"	d
TableBaseClass	util/btree-f/table.h	/^class TableBaseClass$/;"	c
TableBaseClass::DataFile	util/btree-f/table.h	/^      fstream DataFile;   \/\/ the file stream for the table data$/;"	m	class:TableBaseClass	access:protected
TableBaseClass::Empty	util/btree-f/table.h	/^      virtual bool Empty(void) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(void)
TableBaseClass::Insert	util/btree-f/table.h	/^      virtual bool Insert(const ItemType & Item) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(const ItemType & Item)
TableBaseClass::NumItems	util/btree-f/table.h	/^      long NumItems;      \/\/ number of records in the table$/;"	m	class:TableBaseClass	access:protected
TableBaseClass::OpenMode	util/btree-f/table.h	/^      char OpenMode;      \/\/ r or w (read or write) mode for the table$/;"	m	class:TableBaseClass	access:protected
TableBaseClass::Retrieve	util/btree-f/table.h	/^      virtual bool Retrieve(long long SearchKey, ItemType & Item) = 0;$/;"	p	class:TableBaseClass	access:public	signature:(long long SearchKey, ItemType & Item)
Thread_print	util/thread_print/thread_print.cpp	/^Thread_print::Thread_print(int id):tid(id)$/;"	f	class:Thread_print	signature:(int id)
Thread_print	util/thread_print/thread_print.h	/^	Thread_print(int);$/;"	p	class:Thread_print	access:public	signature:(int)
Thread_print	util/thread_print/thread_print.h	/^class Thread_print$/;"	c
Thread_print::Thread_print	util/thread_print/thread_print.cpp	/^Thread_print::Thread_print(int id):tid(id)$/;"	f	class:Thread_print	signature:(int id)
Thread_print::Thread_print	util/thread_print/thread_print.h	/^	Thread_print(int);$/;"	p	class:Thread_print	access:public	signature:(int)
Thread_print::fp	util/thread_print/thread_print.h	/^	FILE* fp;$/;"	m	class:Thread_print	access:private
Thread_print::int2string	util/thread_print/thread_print.cpp	/^string Thread_print::int2string(int n)$/;"	f	class:Thread_print	signature:(int n)
Thread_print::int2string	util/thread_print/thread_print.h	/^	string int2string(int);$/;"	p	class:Thread_print	access:private	signature:(int)
Thread_print::print	util/thread_print/thread_print.cpp	/^void Thread_print::print(const char* fmt, ...)$/;"	f	class:Thread_print	signature:(const char* fmt, ...)
Thread_print::print	util/thread_print/thread_print.h	/^	void print(const char*, ...);$/;"	p	class:Thread_print	access:public	signature:(const char*, ...)
Thread_print::tid	util/thread_print/thread_print.h	/^	int tid;$/;"	m	class:Thread_print	access:private
Thread_print::~Thread_print	util/thread_print/thread_print.cpp	/^Thread_print::~Thread_print()$/;"	f	class:Thread_print	signature:()
Thread_print::~Thread_print	util/thread_print/thread_print.h	/^	~Thread_print();$/;"	p	class:Thread_print	access:public	signature:()
TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.cpp	/^TinyDNSResolver::TinyDNSResolver() {$/;"	f	class:TinyDNSResolver	signature:()
TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.h	/^	TinyDNSResolver();$/;"	p	class:TinyDNSResolver	access:public	signature:()
TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.h	/^class TinyDNSResolver {$/;"	c
TinyDNSResolver::DNSCACHE	component/DNS_Resolver/TinyDNSResolver.h	/^	} DNSCACHE;$/;"	t	class:TinyDNSResolver	typeref:struct:TinyDNSResolver::__anon10	access:private
TinyDNSResolver::DNS_ADDR	component/DNS_Resolver/TinyDNSResolver.cpp	/^const char* TinyDNSResolver::DNS_ADDR[DNS_SERVERS] = {"202.97.224.69", "202.97.224.68"};$/;"	m	class:TinyDNSResolver	file:
TinyDNSResolver::DNS_ADDR	component/DNS_Resolver/TinyDNSResolver.h	/^	static const char*  DNS_ADDR[DNS_SERVERS];$/;"	m	class:TinyDNSResolver	access:private
TinyDNSResolver::DNS_PORT	component/DNS_Resolver/TinyDNSResolver.cpp	/^const int TinyDNSResolver::DNS_PORT = 53;$/;"	m	class:TinyDNSResolver	file:
TinyDNSResolver::DNS_PORT	component/DNS_Resolver/TinyDNSResolver.h	/^	static const int DNS_PORT;$/;"	m	class:TinyDNSResolver	access:private
TinyDNSResolver::DNS_SERVERS	component/DNS_Resolver/TinyDNSResolver.h	/^	enum{DNS_SERVERS= 2	};$/;"	e	enum:TinyDNSResolver::__anon11
TinyDNSResolver::TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.cpp	/^TinyDNSResolver::TinyDNSResolver() {$/;"	f	class:TinyDNSResolver	signature:()
TinyDNSResolver::TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.h	/^	TinyDNSResolver();$/;"	p	class:TinyDNSResolver	access:public	signature:()
TinyDNSResolver::__anon10::_domain	component/DNS_Resolver/TinyDNSResolver.h	/^		char _domain[256];$/;"	m	struct:TinyDNSResolver::__anon10	access:public
TinyDNSResolver::__anon10::_ip	component/DNS_Resolver/TinyDNSResolver.h	/^		char _ip[16];$/;"	m	struct:TinyDNSResolver::__anon10	access:public
TinyDNSResolver::dnscache	component/DNS_Resolver/TinyDNSResolver.h	/^	DNSCACHE dnscache;$/;"	m	class:TinyDNSResolver	access:private
TinyDNSResolver::pkgDNS	component/DNS_Resolver/TinyDNSResolver.cpp	/^int TinyDNSResolver::pkgDNS(const char* domain, DNS_PKG_HEADER_PTR& nphp,$/;"	f	class:TinyDNSResolver	signature:(const char* domain, DNS_PKG_HEADER_PTR& nphp, DNS_PKG_QUERY_PTR& dkqp, unsigned char* dnsBuff, unsigned short id)
TinyDNSResolver::pkgDNS	component/DNS_Resolver/TinyDNSResolver.h	/^	int pkgDNS(const char*, DNS_PKG_HEADER_PTR&, DNS_PKG_QUERY_PTR&, unsigned char*,unsigned short);$/;"	p	class:TinyDNSResolver	access:private	signature:(const char*, DNS_PKG_HEADER_PTR&, DNS_PKG_QUERY_PTR&, unsigned char*,unsigned short)
TinyDNSResolver::recvAnalyse	component/DNS_Resolver/TinyDNSResolver.cpp	/^bool TinyDNSResolver::recvAnalyse(unsigned char* buf, size_t buf_size,$/;"	f	class:TinyDNSResolver	signature:(unsigned char* buf, size_t buf_size, size_t send_size, char* ip)
TinyDNSResolver::recvAnalyse	component/DNS_Resolver/TinyDNSResolver.h	/^	bool recvAnalyse(unsigned char*, size_t, size_t, char*);$/;"	p	class:TinyDNSResolver	access:private	signature:(unsigned char*, size_t, size_t, char*)
TinyDNSResolver::recvfromTimeOut	component/DNS_Resolver/TinyDNSResolver.cpp	/^int TinyDNSResolver::recvfromTimeOut(int socket, long sec, long usec) {$/;"	f	class:TinyDNSResolver	signature:(int socket, long sec, long usec)
TinyDNSResolver::recvfromTimeOut	component/DNS_Resolver/TinyDNSResolver.h	/^	int recvfromTimeOut(int socket, long sec, long usec);$/;"	p	class:TinyDNSResolver	access:private	signature:(int socket, long sec, long usec)
TinyDNSResolver::resolve	component/DNS_Resolver/TinyDNSResolver.cpp	/^bool TinyDNSResolver::resolve(const char* domain, char* ip, unsigned short id) {$/;"	f	class:TinyDNSResolver	signature:(const char* domain, char* ip, unsigned short id)
TinyDNSResolver::resolve	component/DNS_Resolver/TinyDNSResolver.h	/^	bool resolve(const char*, char* ip, unsigned short id);$/;"	p	class:TinyDNSResolver	access:public	signature:(const char*, char* ip, unsigned short id)
TinyDNSResolver::~TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.cpp	/^TinyDNSResolver::~TinyDNSResolver() {$/;"	f	class:TinyDNSResolver	signature:()
TinyDNSResolver::~TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.h	/^	~TinyDNSResolver();$/;"	p	class:TinyDNSResolver	access:public	signature:()
ToLowerCase	global.cpp	/^void ToLowerCase(char * str) {$/;"	f	signature:(char * str)
ToLowerCase	global.h	/^void ToLowerCase(char * str);$/;"	p	signature:(char * str)
URLFILTER_H_	component/URLFilter/URLFilter.h	9;"	d
URLFRONTIER_H_	component/URLFrontier/URLFrontier.h	28;"	d
URLFilter	component/URLFilter/URLFilter.cpp	/^URLFilter::URLFilter(int id) :$/;"	f	class:URLFilter	signature:(int id)
URLFilter	component/URLFilter/URLFilter.h	/^	URLFilter(int);$/;"	p	class:URLFilter	access:public	signature:(int)
URLFilter	component/URLFilter/URLFilter.h	/^class URLFilter {$/;"	c
URLFilter::MAX_FILTER	component/URLFilter/URLFilter.h	/^	enum{MAX_FILTER=20};$/;"	e	enum:URLFilter::__anon6
URLFilter::URLFilter	component/URLFilter/URLFilter.cpp	/^URLFilter::URLFilter(int id) :$/;"	f	class:URLFilter	signature:(int id)
URLFilter::URLFilter	component/URLFilter/URLFilter.h	/^	URLFilter(int);$/;"	p	class:URLFilter	access:public	signature:(int)
URLFilter::_url	component/URLFilter/URLFilter.h	/^	char         _url[2048];$/;"	m	class:URLFilter	access:private
URLFilter::filename	component/URLFilter/URLFilter.h	/^	string  filename;$/;"	m	class:URLFilter	access:private
URLFilter::fill_url	component/URLFilter/URLFilter.cpp	/^bool URLFilter::fill_url(struct page_link *plPtr) {$/;"	f	class:URLFilter	signature:(struct page_link *plPtr)
URLFilter::fill_url	component/URLFilter/URLFilter.h	/^	bool fill_url(struct page_link*);$/;"	p	class:URLFilter	access:private	signature:(struct page_link*)
URLFilter::filter	component/URLFilter/URLFilter.cpp	/^bool URLFilter::filter(struct page_link* plPtr) {$/;"	f	class:URLFilter	signature:(struct page_link* plPtr)
URLFilter::filter	component/URLFilter/URLFilter.h	/^	bool filter(struct page_link*);\/\/true Ë°®Á§∫ËøûÊé•Ë¢´ËøáÊª§Ôºå falseË°®Á§∫ÈÄöËøá‰∫ÜËøáÊª§$/;"	p	class:URLFilter	access:public	signature:(struct page_link*)
URLFilter::re_counter	component/URLFilter/URLFilter.h	/^	int			 re_counter;$/;"	m	class:URLFilter	access:private
URLFilter::re_f	component/URLFilter/URLFilter.h	/^	regex_t re_f[MAX_FILTER];$/;"	m	class:URLFilter	access:private
URLFilter::regex	component/URLFilter/URLFilter.h	/^	char         regex[1024];$/;"	m	class:URLFilter	access:private
URLFilter::tid	component/URLFilter/URLFilter.h	/^	int tid;$/;"	m	class:URLFilter	access:private
URLFilter::tp	component/URLFilter/URLFilter.h	/^	Thread_print tp;$/;"	m	class:URLFilter	access:private
URLFilter::~URLFilter	component/URLFilter/URLFilter.cpp	/^URLFilter::~URLFilter() {$/;"	f	class:URLFilter	signature:()
URLFilter::~URLFilter	component/URLFilter/URLFilter.h	/^	~URLFilter();$/;"	p	class:URLFilter	access:public	signature:()
URLFrontier	component/URLFrontier/URLFrontier.cpp	/^URLFrontier::URLFrontier(int id) :$/;"	f	class:URLFrontier	signature:(int id)
URLFrontier	component/URLFrontier/URLFrontier.h	/^	URLFrontier(int id);$/;"	p	class:URLFrontier	access:public	signature:(int id)
URLFrontier	component/URLFrontier/URLFrontier.h	/^class URLFrontier {$/;"	c
URLFrontier::URLFrontier	component/URLFrontier/URLFrontier.cpp	/^URLFrontier::URLFrontier(int id) :$/;"	f	class:URLFrontier	signature:(int id)
URLFrontier::URLFrontier	component/URLFrontier/URLFrontier.h	/^	URLFrontier(int id);$/;"	p	class:URLFrontier	access:public	signature:(int id)
URLFrontier::addURL	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::addURL(struct page_link* pl) {$/;"	f	class:URLFrontier	signature:(struct page_link* pl)
URLFrontier::addURL	component/URLFrontier/URLFrontier.h	/^	bool addURL(struct page_link*);$/;"	p	class:URLFrontier	access:public	signature:(struct page_link*)
URLFrontier::available	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::available() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::available	component/URLFrontier/URLFrontier.h	/^	bool available();$/;"	p	class:URLFrontier	access:public	signature:()
URLFrontier::cur	component/URLFrontier/URLFrontier.h	/^	long long cur;$/;"	m	class:URLFrontier	access:private
URLFrontier::end	component/URLFrontier/URLFrontier.h	/^	long long end;$/;"	m	class:URLFrontier	access:private
URLFrontier::file_in	component/URLFrontier/URLFrontier.h	/^	std::fstream file_in;$/;"	m	class:URLFrontier	access:private
URLFrontier::file_out	component/URLFrontier/URLFrontier.h	/^	std::fstream file_out;$/;"	m	class:URLFrontier	access:private
URLFrontier::flock	component/URLFrontier/URLFrontier.h	/^	pthread_mutex_t flock;$/;"	m	class:URLFrontier	access:private
URLFrontier::getFileLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::getFileLock() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::getFileLock	component/URLFrontier/URLFrontier.h	/^	void getFileLock();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::getFromFile	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::getFromFile() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::getFromFile	component/URLFrontier/URLFrontier.h	/^	bool getFromFile();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::getLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::getLock(void) {$/;"	f	class:URLFrontier	signature:(void)
URLFrontier::getLock	component/URLFrontier/URLFrontier.h	/^	void getLock();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::is_empty	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::is_empty() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::is_empty	component/URLFrontier/URLFrontier.h	/^	bool is_empty();$/;"	p	class:URLFrontier	access:public	signature:()
URLFrontier::qlock	component/URLFrontier/URLFrontier.h	/^	pthread_mutex_t qlock;$/;"	m	class:URLFrontier	access:private
URLFrontier::readURL	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::readURL(struct page_link* result) {$/;"	f	class:URLFrontier	signature:(struct page_link* result)
URLFrontier::readURL	component/URLFrontier/URLFrontier.h	/^	bool readURL(struct page_link*);$/;"	p	class:URLFrontier	access:public	signature:(struct page_link*)
URLFrontier::releaseFileLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::releaseFileLock() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::releaseFileLock	component/URLFrontier/URLFrontier.h	/^	void releaseFileLock();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::releaseLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::releaseLock() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::releaseLock	component/URLFrontier/URLFrontier.h	/^	void releaseLock();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::tid	component/URLFrontier/URLFrontier.h	/^	int tid;$/;"	m	class:URLFrontier	access:private
URLFrontier::tp	component/URLFrontier/URLFrontier.h	/^	Thread_print tp;$/;"	m	class:URLFrontier	access:private
URLFrontier::url_queue	component/URLFrontier/URLFrontier.h	/^	std::queue<struct page_link> url_queue;$/;"	m	class:URLFrontier	access:private
URLFrontier::write2file	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::write2file() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::write2file	component/URLFrontier/URLFrontier.h	/^	bool write2file();$/;"	p	class:URLFrontier	access:private	signature:()
URLFrontier::~URLFrontier	component/URLFrontier/URLFrontier.cpp	/^URLFrontier::~URLFrontier() {$/;"	f	class:URLFrontier	signature:()
URLFrontier::~URLFrontier	component/URLFrontier/URLFrontier.h	/^	~URLFrontier();$/;"	p	class:URLFrontier	access:public	signature:()
URLSEEN_H_	component/URLSeen/URLSeen.h	9;"	d
URLSeen	component/URLSeen/URLSeen.cpp	/^URLSeen::URLSeen(int id) :$/;"	f	class:URLSeen	signature:(int id)
URLSeen	component/URLSeen/URLSeen.h	/^	URLSeen(int id);$/;"	p	class:URLSeen	access:public	signature:(int id)
URLSeen	component/URLSeen/URLSeen.h	/^class URLSeen {$/;"	c
URLSeen::LRUCacher	component/URLSeen/URLSeen.h	/^	Basic_LRU LRUCacher;$/;"	m	class:URLSeen	access:private
URLSeen::NumItems	component/URLSeen/URLSeen.h	/^	long NumItems; \/\/ number of bytes per node$/;"	m	class:URLSeen	access:private
URLSeen::NumNodes	component/URLSeen/URLSeen.h	/^	long NumNodes; \/\/ number of nodes in the B-tree$/;"	m	class:URLSeen	access:private
URLSeen::Root	component/URLSeen/URLSeen.h	/^	long Root; \/\/ fake pointer to the root node$/;"	m	class:URLSeen	access:private
URLSeen::URLSeen	component/URLSeen/URLSeen.cpp	/^URLSeen::URLSeen(int id) :$/;"	f	class:URLSeen	signature:(int id)
URLSeen::URLSeen	component/URLSeen/URLSeen.h	/^	URLSeen(int id);$/;"	p	class:URLSeen	access:public	signature:(int id)
URLSeen::add	component/URLSeen/URLSeen.cpp	/^bool URLSeen::add(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
URLSeen::add	component/URLSeen/URLSeen.cpp	/^bool URLSeen::add(struct page_link * plptr) {$/;"	f	class:URLSeen	signature:(struct page_link * plptr)
URLSeen::add	component/URLSeen/URLSeen.h	/^	bool add(long long);$/;"	p	class:URLSeen	access:public	signature:(long long)
URLSeen::add	component/URLSeen/URLSeen.h	/^	bool add(struct page_link*);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*)
URLSeen::btree_writer	component/URLSeen/URLSeen.h	/^	BTTableClass btree_writer;\/*,btree_reader;*\/$/;"	m	class:URLSeen	access:private
URLSeen::cache_lock	component/URLSeen/URLSeen.h	/^	pthread_mutex_t cache_lock;$/;"	m	class:URLSeen	access:private
URLSeen::check	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check(long long pl) {$/;"	f	class:URLSeen	signature:(long long pl)
URLSeen::check	component/URLSeen/URLSeen.h	/^	bool check(long long);$/;"	p	class:URLSeen	access:public	signature:(long long)
URLSeen::check_cache	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check_cache(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
URLSeen::check_cache	component/URLSeen/URLSeen.h	/^	bool check_cache(const long long);$/;"	p	class:URLSeen	access:private	signature:(const long long)
URLSeen::check_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check_file(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
URLSeen::check_file	component/URLSeen/URLSeen.h	/^	bool check_file(const long long);$/;"	p	class:URLSeen	access:private	signature:(const long long)
URLSeen::filename	component/URLSeen/URLSeen.h	/^	std::string filename;$/;"	m	class:URLSeen	access:private
URLSeen::getLock_r_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::getLock_r_file() {$/;"	f	class:URLSeen	signature:()
URLSeen::getLock_r_file	component/URLSeen/URLSeen.h	/^	bool getLock_r_file();$/;"	p	class:URLSeen	access:private	signature:()
URLSeen::getLock_w_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::getLock_w_file() {$/;"	f	class:URLSeen	signature:()
URLSeen::getLock_w_file	component/URLSeen/URLSeen.h	/^	bool getLock_w_file();$/;"	p	class:URLSeen	access:private	signature:()
URLSeen::hashurl	component/URLSeen/URLSeen.cpp	/^long long URLSeen::hashurl(struct page_link* pl) {$/;"	f	class:URLSeen	signature:(struct page_link* pl)
URLSeen::hashurl	component/URLSeen/URLSeen.cpp	/^long long URLSeen::hashurl(struct page_link* pl, long long hash) {$/;"	f	class:URLSeen	signature:(struct page_link* pl, long long hash)
URLSeen::hashurl	component/URLSeen/URLSeen.h	/^	long long hashurl(struct page_link*);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*)
URLSeen::hashurl	component/URLSeen/URLSeen.h	/^	long long hashurl(struct page_link*,  long long);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*, long long)
URLSeen::nodetype	component/URLSeen/URLSeen.h	/^	NodeType nodetype;$/;"	m	class:URLSeen	access:private
URLSeen::p_rwlock_btree	component/URLSeen/URLSeen.h	/^	pthread_rwlock_t \/*p_rwlock_cache,*\/ p_rwlock_btree;$/;"	m	class:URLSeen	access:private
URLSeen::rabin	component/URLSeen/URLSeen.h	/^	RabinHashFunction64 rabin;$/;"	m	class:URLSeen	access:private
URLSeen::releaseLock_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::releaseLock_file() {$/;"	f	class:URLSeen	signature:()
URLSeen::releaseLock_file	component/URLSeen/URLSeen.h	/^	bool releaseLock_file();$/;"	p	class:URLSeen	access:private	signature:()
URLSeen::tid	component/URLSeen/URLSeen.h	/^	int tid;$/;"	m	class:URLSeen	access:private
URLSeen::tp	component/URLSeen/URLSeen.h	/^	Thread_print tp;$/;"	m	class:URLSeen	access:private
URLSeen::~URLSeen	component/URLSeen/URLSeen.cpp	/^URLSeen::~URLSeen() {$/;"	f	class:URLSeen	signature:()
URLSeen::~URLSeen	component/URLSeen/URLSeen.h	/^	~URLSeen();$/;"	p	class:URLSeen	access:public	signature:()
URLanalyser	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::URLanalyser(struct page_link* plPtr, char* src) {$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* src)
URLanalyser	component/LinkExtractor/LinkExtractor.h	/^	bool URLanalyser(struct page_link*, char*);\/\/ÈíàÂØπ‰∏Ä‰∏™ÁªôÂÆöÁöÑÁªùÂØπurlÂ∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link*, char*)
WRITER_H_	component/Writer/Writer.h	10;"	d
Wrapper_t	component/protocolModule/HttpModule.h	/^struct Wrapper_t {$/;"	s
Wrapper_t::hm	component/protocolModule/HttpModule.h	/^	HttpModule* hm;$/;"	m	struct:Wrapper_t	access:public
Wrapper_t::tp	component/protocolModule/HttpModule.h	/^	struct threadPara* tp;$/;"	m	struct:Wrapper_t	typeref:struct:Wrapper_t::threadPara	access:public
WriteIt	component/Writer/Writer.cpp	/^bool Writer::WriteIt(struct page_link pl, char* p, int size) {$/;"	f	class:Writer	signature:(struct page_link pl, char* p, int size)
WriteIt	component/Writer/Writer.h	/^        bool WriteIt(struct page_link pl, char* p, int size = MAX_BUFFER);$/;"	p	class:Writer	access:private	signature:(struct page_link pl, char* p, int size = MAX_BUFFER)
Writer	component/Writer/Writer.cpp	/^Writer::Writer(int id):tid(id)$/;"	f	class:Writer	signature:(int id)
Writer	component/Writer/Writer.h	/^        Writer(int);$/;"	p	class:Writer	access:public	signature:(int)
Writer	component/Writer/Writer.h	/^class Writer {$/;"	c
Writer::WriteIt	component/Writer/Writer.cpp	/^bool Writer::WriteIt(struct page_link pl, char* p, int size) {$/;"	f	class:Writer	signature:(struct page_link pl, char* p, int size)
Writer::WriteIt	component/Writer/Writer.h	/^        bool WriteIt(struct page_link pl, char* p, int size = MAX_BUFFER);$/;"	p	class:Writer	access:private	signature:(struct page_link pl, char* p, int size = MAX_BUFFER)
Writer::Writer	component/Writer/Writer.cpp	/^Writer::Writer(int id):tid(id)$/;"	f	class:Writer	signature:(int id)
Writer::Writer	component/Writer/Writer.h	/^        Writer(int);$/;"	p	class:Writer	access:public	signature:(int)
Writer::file	component/Writer/Writer.h	/^        string file;$/;"	m	class:Writer	access:private
Writer::fill_filename	component/Writer/Writer.cpp	/^void Writer::fill_filename(struct page_link pl) {$/;"	f	class:Writer	signature:(struct page_link pl)
Writer::fill_filename	component/Writer/Writer.h	/^        void fill_filename(struct page_link pl);$/;"	p	class:Writer	access:private	signature:(struct page_link pl)
Writer::min	component/Writer/Writer.h	/^        inline int min(int a, int b) {$/;"	f	class:Writer	access:public	signature:(int a, int b)
Writer::p	component/Writer/Writer.h	/^        struct tm *p;$/;"	m	class:Writer	typeref:struct:Writer::tm	access:private
Writer::stime	component/Writer/Writer.h	/^        char stime[128];$/;"	m	class:Writer	access:private
Writer::tid	component/Writer/Writer.h	/^        int tid;$/;"	m	class:Writer	access:private
Writer::timep	component/Writer/Writer.h	/^        time_t timep;$/;"	m	class:Writer	access:private
Writer::tp	component/Writer/Writer.h	/^        Thread_print tp;$/;"	m	class:Writer	access:private
Writer::writeHeader	component/Writer/Writer.cpp	/^bool Writer::writeHeader(int tid, char* buf, struct page_link* p_pl, char* p_ip, int size) {$/;"	f	class:Writer	signature:(int tid, char* buf, struct page_link* p_pl, char* p_ip, int size)
Writer::writeHeader	component/Writer/Writer.h	/^        bool writeHeader(int tid, char* buf, struct page_link *p_pl, char* p_ip, int size = 16);\/\/writeHeader must be used after WriteIt, because WriteIt function call fill_filename funticon to fill filename which is used by writeheader$/;"	p	class:Writer	access:private	signature:(int tid, char* buf, struct page_link *p_pl, char* p_ip, int size = 16)
Writer::writeLocal	component/Writer/Writer.cpp	/^bool Writer::writeLocal(int tid, struct page_link* pl, char* p_ip,RIS& ris , const char * vaildstr, int size) $/;"	f	class:Writer	signature:(int tid, struct page_link* pl, char* p_ip,RIS& ris , const char * vaildstr, int size)
Writer::writeLocal	component/Writer/Writer.h	/^        bool writeLocal(int tid, struct page_link* pl, char * p_ip, RIS& ris, const char * vaildstr="200 OK", int size = 16);$/;"	p	class:Writer	access:public	signature:(int tid, struct page_link* pl, char * p_ip, RIS& ris, const char * vaildstr=”, int size = 16)
Writer::writer_month	component/Writer/Writer.cpp	/^const char * Writer::writer_month[12] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",$/;"	m	class:Writer	file:
Writer::writer_month	component/Writer/Writer.h	/^        static const char * writer_month[12];$/;"	m	class:Writer	access:private
Writer::writer_wday	component/Writer/Writer.cpp	/^const char * Writer::writer_wday[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	class:Writer	file:
Writer::writer_wday	component/Writer/Writer.h	/^        static const char * writer_wday[7];$/;"	m	class:Writer	access:private
Writer::~Writer	component/Writer/Writer.cpp	/^Writer::~Writer() {$/;"	f	class:Writer	signature:()
Writer::~Writer	component/Writer/Writer.h	/^        virtual ~Writer();$/;"	p	class:Writer	access:public	signature:()
X_P_DEGREE	util/RabinHash/rabinhash64.h	/^	    static const long long  X_P_DEGREE = 1LL << (P_DEGREE - 1);$/;"	m	class:RabinHashFunction64	access:private
\<Down>	Session.vim	/^nmap <buffer> <silent> \\<Down> <C-Down>$/;"	m
\<Up>	Session.vim	/^nmap <buffer> <silent> \\<Up> <C-Up>$/;"	m
\I	Session.vim	/^nnoremap <buffer> <silent> \\I :echo Project_GetFname(line('.'))$/;"	m
\ih	Session.vim	/^imap \\ih :IHS$/;"	m
\ih	Session.vim	/^nmap \\ih :IHS$/;"	m
\ihn	Session.vim	/^imap \\ihn :IHN$/;"	m
\ihn	Session.vim	/^nmap \\ihn :IHN$/;"	m
\is	Session.vim	/^imap \\is :IHS$/;"	m
\is	Session.vim	/^nmap \\is :IHS$/;"	m
\mbc	Session.vim	/^map \\mbc <Plug>CMiniBufExplorer$/;"	m
\mbe	Session.vim	/^map \\mbe <Plug>MiniBufExplorer$/;"	m
\mbt	Session.vim	/^map \\mbt <Plug>TMiniBufExplorer$/;"	m
\mbu	Session.vim	/^map \\mbu <Plug>UMiniBufExplorer$/;"	m
\o	Session.vim	/^nmap <buffer> <silent> \\o <C-CR>$/;"	m
\s	Session.vim	/^nmap <buffer> <silent> \\s <S-CR>$/;"	m
\v	Session.vim	/^nmap <buffer> <silent> \\v ¬ç$/;"	m
_BTREE_H_	util/btree-f/btree.h	13;"	d
_ITEMTYPE_H_	util/btree-f/itemtype.h	10;"	d
_TABLE_H_	util/btree-f/table.h	14;"	d
_THREAD_PRINT_	util/thread_print/thread_print.h	3;"	d
__PTHREAD_RWLOCK_FCFS_H	util/rwlock_fcfs/pthread/rwlock_fcfs.h	2;"	d
__PTHREAD_RWLOCK_FCFS_QUEUE_H	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	4;"	d
__anon1::key	util/lru/Basic_LRU.h	/^	long long int key;$/;"	m	struct:__anon1	access:public
__anon1::value	util/lru/Basic_LRU.h	/^	int value;$/;"	m	struct:__anon1	access:public
__anon2::name	util/btree-m/avl_ex1.cpp	/^	long long name;$/;"	m	struct:__anon2	file:	access:public
__anon2::value	util/btree-m/avl_ex1.cpp	/^	int value;$/;"	m	struct:__anon2	file:	access:public
__anon3::Branch	util/btree-f/btree.h	/^   long Branch[MaxKeysPlusOne];   \/\/ Fake pointers to child nodes$/;"	m	struct:__anon3	access:public
__anon3::Count	util/btree-f/btree.h	/^   int Count;               \/\/ Number of keys stored in the current node$/;"	m	struct:__anon3	access:public
__anon3::Key	util/btree-f/btree.h	/^   ItemType Key[MaxKeys];   \/\/ Warning: indexing starts at 0, not 1$/;"	m	struct:__anon3	access:public
__anon4::DataField	util/btree-f/itemtype.h	/^   int DataField;$/;"	m	struct:__anon4	access:public
__anon4::KeyField	util/btree-f/itemtype.h	/^   long long KeyField;$/;"	m	struct:__anon4	access:public
__anon7::additionalRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short additionalRRs;$/;"	m	struct:__anon7	access:public
__anon7::answerRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short answerRRs;$/;"	m	struct:__anon7	access:public
__anon7::authorityRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short authorityRRs;$/;"	m	struct:__anon7	access:public
__anon7::flag	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short flag;$/;"	m	struct:__anon7	access:public
__anon7::id	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short id;$/;"	m	struct:__anon7	access:public
__anon7::questions	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short questions;$/;"	m	struct:__anon7	access:public
__anon8::dns_class	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_class;$/;"	m	struct:__anon8	access:public
__anon8::dns_name	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned char * dns_name;$/;"	m	struct:__anon8	access:public
__anon8::dns_type	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_type;$/;"	m	struct:__anon8	access:public
__anon9::data	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned char* data;$/;"	m	struct:__anon9	access:public
__anon9::dns_class	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_class;$/;"	m	struct:__anon9	access:public
__anon9::dns_name	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_name;$/;"	m	struct:__anon9	access:public
__anon9::dns_ttl	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_ttl;$/;"	m	struct:__anon9	access:public
__anon9::dns_type	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_type;$/;"	m	struct:__anon9	access:public
_domain	component/DNS_Resolver/TinyDNSResolver.h	/^		char _domain[256];$/;"	m	struct:TinyDNSResolver::__anon10	access:public
_host_addr	global.h	/^	char _host_addr[256];$/;"	m	struct:page_link	access:public
_host_file	global.h	/^	char _host_file[1024];$/;"	m	struct:page_link	access:public
_ip	component/DNS_Resolver/TinyDNSResolver.h	/^		char _ip[16];$/;"	m	struct:TinyDNSResolver::__anon10	access:public
_portnumber	global.h	/^	int _portnumber;$/;"	m	struct:page_link	access:public
_url	component/URLFilter/URLFilter.h	/^	char         _url[2048];$/;"	m	class:URLFilter	access:private
abs	util/btree-m/avl_tree.h	/^    abs_plus_root abs;$/;"	m	class:abstract_container::base_avl_tree	access:protected
abs_plus_root	util/btree-m/avl_tree.h	/^    struct abs_plus_root : public abstractor$/;"	s	class:abstract_container::base_avl_tree	inherits:abstractor	access:protected
abstr	util/btree-m/avl_ex1.cpp	/^	struct abstr {$/;"	s	class:env	file:	access:private
abstract_container	util/btree-m/avl_tree.h	/^namespace abstract_container$/;"	n
abstract_container::EQUAL	util/btree-m/avl_tree.h	/^    EQUAL = 1,$/;"	e	enum:abstract_container::search_type
abstract_container::GREATER	util/btree-m/avl_tree.h	/^    GREATER = 4,$/;"	e	enum:abstract_container::search_type
abstract_container::GREATER_EQUAL	util/btree-m/avl_tree.h	/^    GREATER_EQUAL = EQUAL | GREATER$/;"	e	enum:abstract_container::search_type
abstract_container::LESS	util/btree-m/avl_tree.h	/^    LESS = 2,$/;"	e	enum:abstract_container::search_type
abstract_container::LESS_EQUAL	util/btree-m/avl_tree.h	/^    LESS_EQUAL = EQUAL | LESS,$/;"	e	enum:abstract_container::search_type
abstract_container::avl_tree	util/btree-m/avl_tree.h	/^class avl_tree$/;"	c	namespace:abstract_container	inherits:base_avl_tree
abstract_container::base_avl_tree	util/btree-m/avl_tree.h	/^class base_avl_tree$/;"	c	namespace:abstract_container
abstract_container::base_avl_tree::abs	util/btree-m/avl_tree.h	/^    abs_plus_root abs;$/;"	m	class:abstract_container::base_avl_tree	access:protected
abstract_container::base_avl_tree::abs_plus_root	util/btree-m/avl_tree.h	/^    struct abs_plus_root : public abstractor$/;"	s	class:abstract_container::base_avl_tree	inherits:abstractor	access:protected
abstract_container::base_avl_tree::abs_plus_root::root	util/btree-m/avl_tree.h	/^	handle root;$/;"	m	struct:abstract_container::base_avl_tree::abs_plus_root	access:public
abstract_container::base_avl_tree::balance	util/btree-m/avl_tree.h	/^    handle balance(handle bal_h)$/;"	f	class:abstract_container::base_avl_tree	access:private	signature:(handle bal_h)
abstract_container::base_avl_tree::base_avl_tree	util/btree-m/avl_tree.h	/^    base_avl_tree(void) { abs.root = null(); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::build	util/btree-m/avl_tree.h	/^    bool build(fwd_iter p, size num_nodes)$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(fwd_iter p, size num_nodes)
abstract_container::base_avl_tree::cmp_k_n	util/btree-m/avl_tree.h	/^    int cmp_k_n(key k, handle h) { return(abs.compare_key_node(k, h)); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(key k, handle h)
abstract_container::base_avl_tree::cmp_n_n	util/btree-m/avl_tree.h	/^    int cmp_n_n(handle h1, handle h2)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h1, handle h2)
abstract_container::base_avl_tree::get_bf	util/btree-m/avl_tree.h	/^    int get_bf(handle h) { return(abs.get_balance_factor(h)); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h)
abstract_container::base_avl_tree::get_gt	util/btree-m/avl_tree.h	/^    handle get_gt(handle h, bool access = true)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, bool access = true)
abstract_container::base_avl_tree::get_lt	util/btree-m/avl_tree.h	/^    handle get_lt(handle h, bool access = true)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, bool access = true)
abstract_container::base_avl_tree::handle	util/btree-m/avl_tree.h	/^    typedef typename abstractor::handle handle;$/;"	t	class:abstract_container::base_avl_tree	access:public
abstract_container::base_avl_tree::insert	util/btree-m/avl_tree.h	/^    inline handle insert(handle h);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(handle h)
abstract_container::base_avl_tree::insert	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::insert(handle h)$/;"	f	class:abstract_container::base_avl_tree	signature:(handle h)
abstract_container::base_avl_tree::is_empty	util/btree-m/avl_tree.h	/^    bool is_empty(void) { return(abs.root == null()); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::iter	util/btree-m/avl_tree.h	/^    class iter$/;"	c	class:abstract_container::base_avl_tree	access:public
abstract_container::base_avl_tree::iter::branch	util/btree-m/avl_tree.h	/^	bset branch;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
abstract_container::base_avl_tree::iter::cmp_k_n	util/btree-m/avl_tree.h	/^	int cmp_k_n(key k, handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(key k, handle h)
abstract_container::base_avl_tree::iter::cmp_n_n	util/btree-m/avl_tree.h	/^	int cmp_n_n(handle h1, handle h2)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h1, handle h2)
abstract_container::base_avl_tree::iter::depth	util/btree-m/avl_tree.h	/^	unsigned depth;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
abstract_container::base_avl_tree::iter::get_gt	util/btree-m/avl_tree.h	/^	handle get_gt(handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h)
abstract_container::base_avl_tree::iter::get_lt	util/btree-m/avl_tree.h	/^	handle get_lt(handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h)
abstract_container::base_avl_tree::iter::iter	util/btree-m/avl_tree.h	/^	iter(void) { depth = ~0; }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
abstract_container::base_avl_tree::iter::null	util/btree-m/avl_tree.h	/^	handle null(void) { return(tree_->abs.null()); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(void)
abstract_container::base_avl_tree::iter::operator *	util/btree-m/avl_tree.h	/^	handle operator * (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
abstract_container::base_avl_tree::iter::operator ++	util/btree-m/avl_tree.h	/^	void operator ++ (int) { ++(*this); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(int)
abstract_container::base_avl_tree::iter::operator ++	util/btree-m/avl_tree.h	/^	void operator ++ (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
abstract_container::base_avl_tree::iter::operator --	util/btree-m/avl_tree.h	/^	void operator -- (int) { --(*this); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(int)
abstract_container::base_avl_tree::iter::operator --	util/btree-m/avl_tree.h	/^	void operator -- (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
abstract_container::base_avl_tree::iter::path_h	util/btree-m/avl_tree.h	/^	handle path_h[max_depth - 1];$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
abstract_container::base_avl_tree::iter::read_error	util/btree-m/avl_tree.h	/^	bool read_error(void) { return(tree_->read_error()); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
abstract_container::base_avl_tree::iter::start_iter	util/btree-m/avl_tree.h	/^	void start_iter(base_avl_tree &tree, key k, search_type st = EQUAL)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree, key k, search_type st = EQUAL)
abstract_container::base_avl_tree::iter::start_iter_greatest	util/btree-m/avl_tree.h	/^	void start_iter_greatest(base_avl_tree &tree)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree)
abstract_container::base_avl_tree::iter::start_iter_least	util/btree-m/avl_tree.h	/^	void start_iter_least(base_avl_tree &tree)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree)
abstract_container::base_avl_tree::iter::tree_	util/btree-m/avl_tree.h	/^	base_avl_tree *tree_;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
abstract_container::base_avl_tree::key	util/btree-m/avl_tree.h	/^    typedef typename abstractor::key key;$/;"	t	class:abstract_container::base_avl_tree	access:public
abstract_container::base_avl_tree::null	util/btree-m/avl_tree.h	/^    handle null(void) { return(abs.null()); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(void)
abstract_container::base_avl_tree::purge	util/btree-m/avl_tree.h	/^    void purge(void) { abs.root = null(); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::read_error	util/btree-m/avl_tree.h	/^    bool read_error(void) { return(abs.read_error()); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::remove	util/btree-m/avl_tree.h	/^    inline handle remove(key k);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(key k)
abstract_container::base_avl_tree::remove	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::remove(key k)$/;"	f	class:abstract_container::base_avl_tree	signature:(key k)
abstract_container::base_avl_tree::search	util/btree-m/avl_tree.h	/^    inline handle search(key k, search_type st = EQUAL);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(key k, search_type st = EQUAL)
abstract_container::base_avl_tree::search	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search(key k, search_type st)$/;"	f	class:abstract_container::base_avl_tree	signature:(key k, search_type st)
abstract_container::base_avl_tree::search_greatest	util/btree-m/avl_tree.h	/^    inline handle search_greatest(void);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::search_greatest	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search_greatest(void)$/;"	f	class:abstract_container::base_avl_tree	signature:(void)
abstract_container::base_avl_tree::search_least	util/btree-m/avl_tree.h	/^    inline handle search_least(void);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(void)
abstract_container::base_avl_tree::search_least	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search_least(void)$/;"	f	class:abstract_container::base_avl_tree	signature:(void)
abstract_container::base_avl_tree::set_bf	util/btree-m/avl_tree.h	/^    void set_bf(handle h, int bf) { }\/\/abs.set_balance_factor(h, bf); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, int bf)
abstract_container::base_avl_tree::set_gt	util/btree-m/avl_tree.h	/^    void set_gt(handle h, handle gh) { abs.set_greater(h, gh); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, handle gh)
abstract_container::base_avl_tree::set_lt	util/btree-m/avl_tree.h	/^    void set_lt(handle h, handle lh) { abs.set_less(h, lh); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, handle lh)
abstract_container::base_avl_tree::size	util/btree-m/avl_tree.h	/^    typedef typename abstractor::size size;$/;"	t	class:abstract_container::base_avl_tree	access:public
abstract_container::base_avl_tree::subst	util/btree-m/avl_tree.h	/^    inline handle subst(handle new_node);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(handle new_node)
abstract_container::base_avl_tree::subst	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::subst(handle new_node)$/;"	f	class:abstract_container::base_avl_tree	signature:(handle new_node)
abstract_container::search_type	util/btree-m/avl_tree.h	/^enum search_type$/;"	g	namespace:abstract_container
accept_pending_items	util/rwlock_fcfs/rwlock.c	/^static void accept_pending_items(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	file:	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
add	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::add(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
add	component/ContentSeen/ContentSeen.h	/^	bool add(long long );$/;"	p	class:ContentSeen	access:public	signature:(long long )
add	component/URLSeen/URLSeen.cpp	/^bool URLSeen::add(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
add	component/URLSeen/URLSeen.cpp	/^bool URLSeen::add(struct page_link * plptr) {$/;"	f	class:URLSeen	signature:(struct page_link * plptr)
add	component/URLSeen/URLSeen.h	/^	bool add(long long);$/;"	p	class:URLSeen	access:public	signature:(long long)
add	component/URLSeen/URLSeen.h	/^	bool add(struct page_link*);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*)
addURL	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::addURL(struct page_link* pl) {$/;"	f	class:URLFrontier	signature:(struct page_link* pl)
addURL	component/URLFrontier/URLFrontier.h	/^	bool addURL(struct page_link*);$/;"	p	class:URLFrontier	access:public	signature:(struct page_link*)
additionalRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short additionalRRs;$/;"	m	struct:__anon7	access:public
adjust_cache	util/lru/Basic_LRU.cpp	/^void Basic_LRU::adjust_cache(PCACHE_PAGE p) {$/;"	f	class:Basic_LRU	signature:(PCACHE_PAGE p)
adjust_cache	util/lru/Basic_LRU.h	/^	void adjust_cache(PCACHE_PAGE);$/;"	p	class:Basic_LRU	access:private	signature:(PCACHE_PAGE)
alrm_handler	component/protocolModule/HttpModule.cpp	/^void alrm_handler(int signo) {$/;"	f	signature:(int signo)
alrm_handler	component/protocolModule/HttpModule.h	/^void alrm_handler(int);$/;"	p	signature:(int)
amp	global.cpp	/^const char* amp="&amp;";$/;"	v
answerRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short answerRRs;$/;"	m	struct:__anon7	access:public
assign_counter	crawler.cpp	/^int assignmode = 0, assign_counter = 0;$/;"	v
assignmode	crawler.cpp	/^int assignmode = 0, assign_counter = 0;$/;"	v
authorityRRs	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short authorityRRs;$/;"	m	struct:__anon7	access:public
available	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::available() {$/;"	f	class:URLFrontier	signature:()
available	component/URLFrontier/URLFrontier.h	/^	bool available();$/;"	p	class:URLFrontier	access:public	signature:()
avl_tree	util/btree-m/avl_tree.h	/^class avl_tree$/;"	c	namespace:abstract_container	inherits:base_avl_tree
balance	util/btree-m/avl_tree.h	/^    handle balance(handle bal_h)$/;"	f	class:abstract_container::base_avl_tree	access:private	signature:(handle bal_h)
base_avl_tree	util/btree-m/avl_tree.h	/^    base_avl_tree(void) { abs.root = null(); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
base_avl_tree	util/btree-m/avl_tree.h	/^class base_avl_tree$/;"	c	namespace:abstract_container
bezero	util/btree-f/btree.h	/^      int bezero;\/\/‰∏∫‰∫ÜËÆ©Êï¥‰∏™Á±ªÁöÑÂ§ßÂ∞è‰∏∫20480Â≠óËäÇ$/;"	m	class:BTTableClass	access:private
bigbuf	component/protocolModule/HttpModule.h	/^	char* bigbuf;$/;"	m	struct:threadPara	access:public
branch	util/btree-m/avl_tree.h	/^	bset branch;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
btree_f_write	component/ContentSeen/ContentSeen.h	/^	BTTableClass btree_f_write;$/;"	m	class:ContentSeen	access:private
btree_m	component/ContentSeen/ContentSeen.h	/^	env btree_m;$/;"	m	class:ContentSeen	access:private
btree_writer	component/URLSeen/URLSeen.h	/^	BTTableClass btree_writer;\/*,btree_reader;*\/$/;"	m	class:URLSeen	access:private
buffer	component/protocolModule/HttpModule.h	/^	char* buffer;$/;"	m	struct:threadPara	access:public
bughunterc	global.cpp	/^int bughunterc = 0;$/;"	v
bughunterf	global.cpp	/^int bughunterf = 0;$/;"	v
build	util/btree-m/avl_tree.h	/^    bool build(fwd_iter p, size num_nodes)$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(fwd_iter p, size num_nodes)
cache_lock	component/URLSeen/URLSeen.h	/^	pthread_mutex_t cache_lock;$/;"	m	class:URLSeen	access:private
check	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
check	component/ContentSeen/ContentSeen.h	/^	bool check(long long);$/;"	p	class:ContentSeen	access:public	signature:(long long)
check	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check(long long pl) {$/;"	f	class:URLSeen	signature:(long long pl)
check	component/URLSeen/URLSeen.h	/^	bool check(long long);$/;"	p	class:URLSeen	access:public	signature:(long long)
check_cache	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check_cache(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
check_cache	component/URLSeen/URLSeen.h	/^	bool check_cache(const long long);$/;"	p	class:URLSeen	access:private	signature:(const long long)
check_f	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check_f(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
check_f	component/ContentSeen/ContentSeen.h	/^	bool check_f(long long hash);$/;"	p	class:ContentSeen	access:private	signature:(long long hash)
check_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::check_file(long long hash) {$/;"	f	class:URLSeen	signature:(long long hash)
check_file	component/URLSeen/URLSeen.h	/^	bool check_file(const long long);$/;"	p	class:URLSeen	access:private	signature:(const long long)
check_m	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::check_m(long long hash) {$/;"	f	class:ContentSeen	signature:(long long hash)
check_m	component/ContentSeen/ContentSeen.h	/^	bool check_m(long long hash);$/;"	p	class:ContentSeen	access:private	signature:(long long hash)
clearself	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::clearself() {$/;"	f	class:LinkExtractor	signature:()
clearself	component/LinkExtractor/LinkExtractor.h	/^	bool clearself();\/\/ÈíàÂØπÊØè‰∏Ä‰∏™ÁΩëÈ°µÊèêÂèñÂÆåÊâÄÊúâË∂ÖÈìæÊé•ÂêéÂøÖÈ°ªÈáäÊîæ$/;"	p	class:LinkExtractor	access:public	signature:()
clearself	component/ris/ris.cpp	/^void RIS::clearself(){$/;"	f	class:RIS	signature:()
clearself	component/ris/ris.h	/^	void clearself();$/;"	p	class:RIS	access:public	signature:()
clearself	util/btree-m/avl_ex1.cpp	/^	void clearself(queue<KV> &q ) {$/;"	f	class:env	access:public	signature:(queue<KV> &q )
clearself	util/btree-m/avl_ex1.cpp	/^	void clearself(void) {$/;"	f	class:env	access:public	signature:(void)
cmp_k_n	util/btree-m/avl_tree.h	/^	int cmp_k_n(key k, handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(key k, handle h)
cmp_k_n	util/btree-m/avl_tree.h	/^    int cmp_k_n(key k, handle h) { return(abs.compare_key_node(k, h)); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(key k, handle h)
cmp_n_n	util/btree-m/avl_tree.h	/^	int cmp_n_n(handle h1, handle h2)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h1, handle h2)
cmp_n_n	util/btree-m/avl_tree.h	/^    int cmp_n_n(handle h1, handle h2)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h1, handle h2)
compare_key_node	util/btree-m/avl_ex1.cpp	/^		static int compare_key_node(key k, handle h) {$/;"	f	struct:env::abstr	access:public	signature:(key k, handle h)
compare_node_node	util/btree-m/avl_ex1.cpp	/^		static int compare_node_node(handle h1, handle h2) {$/;"	f	struct:env::abstr	access:public	signature:(handle h1, handle h2)
computeWShifted	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::computeWShifted(const long long w) {$/;"	f	class:RabinHashFunction64	signature:(const long long w)
computeWShifted	util/RabinHash/rabinhash64.h	/^	    long long computeWShifted(const long long w);$/;"	p	class:RabinHashFunction64	access:private	signature:(const long long w)
cond	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_cond_t cond;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
cond_fetch	component/protocolModule/HttpModule.h	/^	pthread_cond_t cond_fetch;$/;"	m	class:HttpModule	access:private
contentseen_vector	crawler.cpp	/^vector<ContentSeen*> contentseen_vector;$/;"	v
cur	component/URLFrontier/URLFrontier.h	/^	long long cur;$/;"	m	class:URLFrontier	access:private
curptr	component/ris/ris.h	/^	char* curptr;$/;"	m	class:RIS	access:private
currPage_link	component/LinkExtractor/LinkExtractor.h	/^	struct page_link* currPage_link;$/;"	m	class:LinkExtractor	typeref:struct:LinkExtractor::page_link	access:private
currPtr	component/LinkExtractor/LinkExtractor.h	/^	char* currPtr;\/\/ÊåáÂêëÂ≠òÊîæÁΩëÈ°µÁöÑÂÜÖÂ≠ò$/;"	m	class:LinkExtractor	access:private
curr_num	util/lru/Basic_LRU.h	/^	int curr_num;$/;"	m	class:Basic_LRU	access:private
data	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned char* data;$/;"	m	struct:__anon9	access:public
data	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    void * data;$/;"	m	struct:pthread_rwlock_fcfs_queue_item_struct	access:public
debug	global.cpp	/^bool debug = false;$/;"	v
depth	util/btree-m/avl_tree.h	/^	unsigned depth;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
dequeue_and_destroy_item	util/rwlock_fcfs/rwlock.c	260;"	d	file:
dequeue_and_destroy_item	util/rwlock_fcfs/rwlock.c	370;"	d	file:
dns_class	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_class;$/;"	m	struct:__anon8	access:public
dns_class	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_class;$/;"	m	struct:__anon9	access:public
dns_name	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned char * dns_name;$/;"	m	struct:__anon8	access:public
dns_name	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_name;$/;"	m	struct:__anon9	access:public
dns_ttl	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_ttl;$/;"	m	struct:__anon9	access:public
dns_type	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_type;$/;"	m	struct:__anon8	access:public
dns_type	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short dns_type;$/;"	m	struct:__anon9	access:public
dnscache	component/DNS_Resolver/TinyDNSResolver.h	/^	DNSCACHE dnscache;$/;"	m	class:TinyDNSResolver	access:private
dump	util/btree-m/avl_ex1.cpp	/^	void dump(void) {$/;"	f	class:env	access:public	signature:(void)
end	component/URLFrontier/URLFrontier.h	/^	long long end;$/;"	m	class:URLFrontier	access:private
env	util/btree-m/avl_ex1.cpp	/^class env {$/;"	c	file:
env::abstr	util/btree-m/avl_ex1.cpp	/^	struct abstr {$/;"	s	class:env	file:	access:private
env::abstr::compare_key_node	util/btree-m/avl_ex1.cpp	/^		static int compare_key_node(key k, handle h) {$/;"	f	struct:env::abstr	access:public	signature:(key k, handle h)
env::abstr::compare_node_node	util/btree-m/avl_ex1.cpp	/^		static int compare_node_node(handle h1, handle h2) {$/;"	f	struct:env::abstr	access:public	signature:(handle h1, handle h2)
env::abstr::get_balance_factor	util/btree-m/avl_ex1.cpp	/^		static long long get_balance_factor(handle h) {$/;"	f	struct:env::abstr	access:public	signature:(handle h)
env::abstr::get_greater	util/btree-m/avl_ex1.cpp	/^		static handle get_greater(handle h, bool access) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, bool access)
env::abstr::get_less	util/btree-m/avl_ex1.cpp	/^		static handle get_less(handle h, bool access) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, bool access)
env::abstr::handle	util/btree-m/avl_ex1.cpp	/^		typedef node *handle;$/;"	t	struct:env::abstr	file:	access:public
env::abstr::key	util/btree-m/avl_ex1.cpp	/^		typedef const long long key;$/;"	t	struct:env::abstr	file:	access:public
env::abstr::null	util/btree-m/avl_ex1.cpp	/^		static handle null(void) {$/;"	f	struct:env::abstr	access:public	signature:(void)
env::abstr::read_error	util/btree-m/avl_ex1.cpp	/^		static bool read_error(void) {$/;"	f	struct:env::abstr	access:public	signature:(void)
env::abstr::set_greater	util/btree-m/avl_ex1.cpp	/^		static void set_greater(handle h, handle gh) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, handle gh)
env::abstr::set_less	util/btree-m/avl_ex1.cpp	/^		static void set_less(handle h, handle lh) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, handle lh)
env::abstr::size	util/btree-m/avl_ex1.cpp	/^		typedef unsigned size;$/;"	t	struct:env::abstr	file:	access:public
env::clearself	util/btree-m/avl_ex1.cpp	/^	void clearself(queue<KV> &q ) {$/;"	f	class:env	access:public	signature:(queue<KV> &q )
env::clearself	util/btree-m/avl_ex1.cpp	/^	void clearself(void) {$/;"	f	class:env	access:public	signature:(void)
env::dump	util/btree-m/avl_ex1.cpp	/^	void dump(void) {$/;"	f	class:env	access:public	signature:(void)
env::get	util/btree-m/avl_ex1.cpp	/^	const int get(const long long name) {$/;"	f	class:env	access:public	signature:(const long long name)
env::node	util/btree-m/avl_ex1.cpp	/^	struct node {$/;"	s	class:env	file:	access:private
env::node::gt	util/btree-m/avl_ex1.cpp	/^		node *gt, *lt;$/;"	m	struct:env::node	file:	access:public
env::node::lt	util/btree-m/avl_ex1.cpp	/^		node *gt, *lt;$/;"	m	struct:env::node	file:	access:public
env::node::name	util/btree-m/avl_ex1.cpp	/^		long long name;$/;"	m	struct:env::node	file:	access:public
env::node::value	util/btree-m/avl_ex1.cpp	/^		int value;$/;"	m	struct:env::node	file:	access:public
env::set	util/btree-m/avl_ex1.cpp	/^	void set(const long long name, const int value) {$/;"	f	class:env	access:public	signature:(const long long name, const int value)
env::tree	util/btree-m/avl_ex1.cpp	/^	tree_t tree;$/;"	m	class:env	file:	access:private
env::tree_t	util/btree-m/avl_ex1.cpp	/^	typedef abstract_container::avl_tree<abstr> tree_t;$/;"	t	class:env	file:	access:private
extract_first_non_disabled_item	util/rwlock_fcfs/rwlock.c	267;"	d	file:
extract_first_non_disabled_item	util/rwlock_fcfs/rwlock.c	371;"	d	file:
fetch	component/protocolModule/HttpModule.cpp	/^bool HttpModule::fetch(struct page_link pl, char* buffer, char* bigbuf, int tid) {$/;"	f	class:HttpModule	signature:(struct page_link pl, char* buffer, char* bigbuf, int tid)
fetch	component/protocolModule/HttpModule.h	/^	bool fetch(struct page_link pl, char* buffer, char* bigbuf, int tid);$/;"	p	class:HttpModule	access:public	signature:(struct page_link pl, char* buffer, char* bigbuf, int tid)
file	component/Writer/Writer.h	/^        string file;$/;"	m	class:Writer	access:private
fileBuffer	component/ris/ris.h	/^	char fileBuffer[DMAX_BUFFER+1];$/;"	m	class:RIS	access:private
file_hash	global.h	/^	long long file_hash;$/;"	m	struct:url_hash	access:public
file_in	component/URLFrontier/URLFrontier.h	/^	std::fstream file_in;$/;"	m	class:URLFrontier	access:private
file_out	component/URLFrontier/URLFrontier.h	/^	std::fstream file_out;$/;"	m	class:URLFrontier	access:private
filename	component/ContentSeen/ContentSeen.h	/^	string filename;$/;"	m	class:ContentSeen	access:private
filename	component/URLFilter/URLFilter.h	/^	string  filename;$/;"	m	class:URLFilter	access:private
filename	component/URLSeen/URLSeen.h	/^	std::string filename;$/;"	m	class:URLSeen	access:private
fillBuffer	component/ris/ris.cpp	/^bool RIS::fillBuffer(char* b, const int size ){$/;"	f	class:RIS	signature:(char* b, const int size )
fillBuffer	component/ris/ris.h	/^	bool fillBuffer(char* b, const int size = MAX_BUFFER);$/;"	p	class:RIS	access:public	signature:(char* b, const int size = MAX_BUFFER)
fill_filename	component/Writer/Writer.cpp	/^void Writer::fill_filename(struct page_link pl) {$/;"	f	class:Writer	signature:(struct page_link pl)
fill_filename	component/Writer/Writer.h	/^        void fill_filename(struct page_link pl);$/;"	p	class:Writer	access:private	signature:(struct page_link pl)
fill_url	component/URLFilter/URLFilter.cpp	/^bool URLFilter::fill_url(struct page_link *plPtr) {$/;"	f	class:URLFilter	signature:(struct page_link *plPtr)
fill_url	component/URLFilter/URLFilter.h	/^	bool fill_url(struct page_link*);$/;"	p	class:URLFilter	access:private	signature:(struct page_link*)
filter	component/URLFilter/URLFilter.cpp	/^bool URLFilter::filter(struct page_link* plPtr) {$/;"	f	class:URLFilter	signature:(struct page_link* plPtr)
filter	component/URLFilter/URLFilter.h	/^	bool filter(struct page_link*);\/\/true Ë°®Á§∫ËøûÊé•Ë¢´ËøáÊª§Ôºå falseË°®Á§∫ÈÄöËøá‰∫ÜËøáÊª§$/;"	p	class:URLFilter	access:public	signature:(struct page_link*)
find_cache	util/lru/Basic_LRU.cpp	/^PCACHE_PAGE Basic_LRU::find_cache(long long int key)const {$/;"	f	class:Basic_LRU	signature:(long long int key) const
find_cache	util/lru/Basic_LRU.h	/^	PCACHE_PAGE find_cache(long long int key)const;$/;"	p	class:Basic_LRU	access:private	signature:(long long int key) const
fixURL	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::fixURL(struct page_link* plPtr, char* url) {$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* url)
fixURL	component/LinkExtractor/LinkExtractor.h	/^	bool fixURL(struct page_link*plptr, char*url);\/\/ÈíàÂØπ‰∏Ä‰∏™urlÔºàÂèØËÉΩÊòØÁõ∏ÂØπÁöÑ‰πüÂèØËÉΩÊòØÁªùÂØπÁöÑÔºâÔºåÊ≠£Á°ÆÂ∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:private	signature:(struct page_link*plptr, char*url)
flag	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short flag;$/;"	m	struct:__anon7	access:public
flag	component/protocolModule/HttpModule.h	/^	int flag;$/;"	m	struct:threadPara	access:public
flock	component/URLFrontier/URLFrontier.h	/^	pthread_mutex_t flock;$/;"	m	class:URLFrontier	access:private
fp	util/thread_print/thread_print.h	/^	FILE* fp;$/;"	m	class:Thread_print	access:private
gain_read_generic	util/rwlock_fcfs/rwlock.c	/^static int gain_read_generic($/;"	f	file:	signature:( pthread_rwlock_fcfs_t * rwlock, int wait_for_access, int is_timed, const struct timespec * abstime, int (*continue_callback)(void * context), void * context )
gain_write_for_destroy	util/rwlock_fcfs/rwlock.c	/^static int gain_write_for_destroy(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	file:	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
gain_write_generic	util/rwlock_fcfs/rwlock.c	/^static int gain_write_generic($/;"	f	file:	signature:( pthread_rwlock_fcfs_t * rwlock, int write_for_destroy, int wait_for_access, int is_timed, const struct timespec * abstime, int (*continue_callback)(void * context), void * context )
get	util/btree-m/avl_ex1.cpp	/^	const int get(const long long name) {$/;"	f	class:env	access:public	signature:(const long long name)
getFileLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::getFileLock() {$/;"	f	class:URLFrontier	signature:()
getFileLock	component/URLFrontier/URLFrontier.h	/^	void getFileLock();$/;"	p	class:URLFrontier	access:private	signature:()
getFromFile	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::getFromFile() {$/;"	f	class:URLFrontier	signature:()
getFromFile	component/URLFrontier/URLFrontier.h	/^	bool getFromFile();$/;"	p	class:URLFrontier	access:private	signature:()
getHead	component/ris/ris.cpp	/^char* RIS::getHead(){$/;"	f	class:RIS	signature:()
getHead	component/ris/ris.h	/^	char* getHead();$/;"	p	class:RIS	access:public	signature:()
getIP	component/protocolModule/HttpModule.cpp	/^char* HttpModule::getIP(){$/;"	f	class:HttpModule	signature:()
getIP	component/protocolModule/HttpModule.h	/^	char* getIP();$/;"	p	class:HttpModule	access:public	signature:()
getLink	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::getLink(struct page_link* pl) {$/;"	f	class:LinkExtractor	signature:(struct page_link* pl)
getLink	component/LinkExtractor/LinkExtractor.h	/^	bool getLink(struct page_link* pl) ;\/\/ÊèêÂèñ‰∏Ä‰∏™Ë∂ÖÈìæÊé•Âπ∂Â∞ÅË£ÖÂà∞ÁªìÊûÑ‰∏≠$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link* pl)
getLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::getLock(void) {$/;"	f	class:URLFrontier	signature:(void)
getLock	component/URLFrontier/URLFrontier.h	/^	void getLock();$/;"	p	class:URLFrontier	access:private	signature:()
getLock_f_r	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_f_r() {$/;"	f	class:ContentSeen	signature:()
getLock_f_r	component/ContentSeen/ContentSeen.h	/^	bool getLock_f_r();$/;"	p	class:ContentSeen	access:private	signature:()
getLock_f_w	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_f_w() {$/;"	f	class:ContentSeen	signature:()
getLock_f_w	component/ContentSeen/ContentSeen.h	/^	bool getLock_f_w();$/;"	p	class:ContentSeen	access:private	signature:()
getLock_m_r	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_m_r() {$/;"	f	class:ContentSeen	signature:()
getLock_m_r	component/ContentSeen/ContentSeen.h	/^	bool getLock_m_r();$/;"	p	class:ContentSeen	access:private	signature:()
getLock_m_w	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::getLock_m_w() {$/;"	f	class:ContentSeen	signature:()
getLock_m_w	component/ContentSeen/ContentSeen.h	/^	bool getLock_m_w();$/;"	p	class:ContentSeen	access:private	signature:()
getLock_r_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::getLock_r_file() {$/;"	f	class:URLSeen	signature:()
getLock_r_file	component/URLSeen/URLSeen.h	/^	bool getLock_r_file();$/;"	p	class:URLSeen	access:private	signature:()
getLock_w_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::getLock_w_file() {$/;"	f	class:URLSeen	signature:()
getLock_w_file	component/URLSeen/URLSeen.h	/^	bool getLock_w_file();$/;"	p	class:URLSeen	access:private	signature:()
getNum	util/lru/Basic_LRU.cpp	/^int Basic_LRU::getNum(){$/;"	f	class:Basic_LRU	signature:()
getNum	util/lru/Basic_LRU.h	/^	int getNum();$/;"	p	class:Basic_LRU	access:public	signature:()
getP	util/RabinHash/rabinhash64.cpp	/^const long long RabinHashFunction64::getP() {$/;"	f	class:RabinHashFunction64	signature:()
getP	util/RabinHash/rabinhash64.h	/^	const long long getP();$/;"	p	class:RabinHashFunction64	access:public	signature:()
getPCurrentNode	util/btree-f/btree.cpp	/^void BTTableClass::getPCurrentNode(NodeType& nt){$/;"	f	class:BTTableClass	signature:(NodeType& nt)
getPCurrentNode	util/btree-f/btree.h	/^      void getPCurrentNode(NodeType&);\/\/‰º†ÂºïÁî®$/;"	p	class:BTTableClass	access:public	signature:(NodeType&)
getPtr	component/ris/ris.cpp	/^char* RIS::getPtr(){$/;"	f	class:RIS	signature:()
getPtr	component/ris/ris.h	/^	char* getPtr();$/;"	p	class:RIS	access:public	signature:()
get_balance_factor	util/btree-m/avl_ex1.cpp	/^		static long long get_balance_factor(handle h) {$/;"	f	struct:env::abstr	access:public	signature:(handle h)
get_bf	util/btree-m/avl_tree.h	/^    int get_bf(handle h) { return(abs.get_balance_factor(h)); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h)
get_greater	util/btree-m/avl_ex1.cpp	/^		static handle get_greater(handle h, bool access) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, bool access)
get_gt	util/btree-m/avl_tree.h	/^	handle get_gt(handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h)
get_gt	util/btree-m/avl_tree.h	/^    handle get_gt(handle h, bool access = true)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, bool access = true)
get_less	util/btree-m/avl_ex1.cpp	/^		static handle get_less(handle h, bool access) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, bool access)
get_lt	util/btree-m/avl_tree.h	/^	handle get_lt(handle h)$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(handle h)
get_lt	util/btree-m/avl_tree.h	/^    handle get_lt(handle h, bool access = true)$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, bool access = true)
gt	util/btree-m/avl_ex1.cpp	/^		node *gt, *lt;$/;"	m	struct:env::node	file:	access:public
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
handle	util/btree-m/avl_ex1.cpp	/^		typedef node *handle;$/;"	t	struct:env::abstr	file:	access:public
handle	util/btree-m/avl_tree.h	/^    typedef typename abstractor::handle handle;$/;"	t	class:abstract_container::base_avl_tree	access:public
hash	component/ContentSeen/ContentSeen.cpp	/^long long ContentSeen::hash(char* doc, int size) {$/;"	f	class:ContentSeen	signature:(char* doc, int size)
hash	component/ContentSeen/ContentSeen.h	/^	long long hash(char*, int);$/;"	p	class:ContentSeen	access:public	signature:(char*, int)
hash	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::hash(const char A[], const int offset,$/;"	f	class:RabinHashFunction64	signature:(const char A[], const int offset, const int length, long long w)
hash	util/RabinHash/rabinhash64.cpp	/^long long RabinHashFunction64::hash(const char A[], const int size) {$/;"	f	class:RabinHashFunction64	signature:(const char A[], const int size)
hash	util/RabinHash/rabinhash64.h	/^	long long hash(const char A[], const int offset, const int length, long long w);$/;"	p	class:RabinHashFunction64	access:public	signature:(const char A[], const int offset, const int length, long long w)
hash	util/RabinHash/rabinhash64.h	/^	long long hash(const char A[], const int size);$/;"	p	class:RabinHashFunction64	access:public	signature:(const char A[], const int size)
hash_site	global.cpp	/^long long hash_site(struct page_link* ppl) {$/;"	f	signature:(struct page_link* ppl)
hash_site	global.h	/^long long hash_site(struct page_link*);$/;"	p	signature:(struct page_link*)
hashurl	component/URLSeen/URLSeen.cpp	/^long long URLSeen::hashurl(struct page_link* pl) {$/;"	f	class:URLSeen	signature:(struct page_link* pl)
hashurl	component/URLSeen/URLSeen.cpp	/^long long URLSeen::hashurl(struct page_link* pl, long long hash) {$/;"	f	class:URLSeen	signature:(struct page_link* pl, long long hash)
hashurl	component/URLSeen/URLSeen.h	/^	long long hashurl(struct page_link*);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*)
hashurl	component/URLSeen/URLSeen.h	/^	long long hashurl(struct page_link*,  long long);$/;"	p	class:URLSeen	access:public	signature:(struct page_link*, long long)
head	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    pthread_rwlock_fcfs_queue_item_t * head;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
headBuffer	component/ris/ris.h	/^	char headBuffer[DMAX_HEAD];$/;"	m	class:RIS	access:private
head_pointer	util/lru/Basic_LRU.h	/^	PCACHE_PAGE head_pointer;$/;"	m	class:Basic_LRU	access:private
help	Session.vim	/^cnoremap <buffer> help let g:proj_doinghelp = 1$/;"	m
hit_cache	util/lru/Basic_LRU.cpp	/^bool Basic_LRU::hit_cache(long long int key) {$/;"	f	class:Basic_LRU	signature:(long long int key)
hit_cache	util/lru/Basic_LRU.h	/^	bool hit_cache(long long int key);$/;"	p	class:Basic_LRU	access:public	signature:(long long int key)
hm	component/protocolModule/HttpModule.h	/^	HttpModule* hm;$/;"	m	struct:Wrapper_t	access:public
host_hash	global.h	/^	long long host_hash;$/;"	m	struct:url_hash	access:public
id	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short id;$/;"	m	struct:__anon7	access:public
info_compiler	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
initContentSeen	crawler.cpp	/^void initContentSeen() {$/;"	f	signature:()
initLinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^bool LinkExtractor::initLinkExtractor(struct page_link* plPtr, char* p,$/;"	f	class:LinkExtractor	signature:(struct page_link* plPtr, char* p, int size)
initLinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	bool initLinkExtractor(struct page_link* ,char*, int);\/\/ÂàùÂßãÂåñ$/;"	p	class:LinkExtractor	access:public	signature:(struct page_link* ,char*, int)
initURLContentSeen	global.h	/^void initURLContentSeen();$/;"	p	signature:()
initURLFriontier	global.h	/^void initURLFriontier();$/;"	p	signature:()
initURLFrontier	crawler.cpp	/^void initURLFrontier() {$/;"	f	signature:()
initURLSeen	global.h	/^void initURLSeen();$/;"	p	signature:()
initUrlSeen	crawler.cpp	/^void initUrlSeen() {$/;"	f	signature:()
initial_cond_constant	util/rwlock_fcfs/rwlock.c	/^static const pthread_cond_t initial_cond_constant = PTHREAD_COND_INITIALIZER;$/;"	v	file:
initial_mutex_constant	util/rwlock_fcfs/rwlock.c	/^static const pthread_mutex_t initial_mutex_constant = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
initializeTables	util/RabinHash/rabinhash64.cpp	/^void RabinHashFunction64::initializeTables() {$/;"	f	class:RabinHashFunction64	signature:()
initializeTables	util/RabinHash/rabinhash64.h	/^	    void initializeTables();$/;"	p	class:RabinHashFunction64	access:private	signature:()
insert	util/btree-m/avl_tree.h	/^    inline handle insert(handle h);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(handle h)
insert	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::insert(handle h)$/;"	f	class:abstract_container::base_avl_tree	signature:(handle h)
insert_cache	util/lru/Basic_LRU.cpp	/^long long int Basic_LRU::insert_cache(long long int k, int v) {$/;"	f	class:Basic_LRU	signature:(long long int k, int v)
insert_cache	util/lru/Basic_LRU.h	/^	long long int insert_cache(long long int k, int v);$/;"	p	class:Basic_LRU	access:public	signature:(long long int k, int v)
int2string	util/thread_print/thread_print.cpp	/^string Thread_print::int2string(int n)$/;"	f	class:Thread_print	signature:(int n)
int2string	util/thread_print/thread_print.h	/^	string int2string(int);$/;"	p	class:Thread_print	access:private	signature:(int)
integer2string	global.cpp	/^std::string integer2string(const int n) {$/;"	f	signature:(const int n)
integer2string	global.h	/^std::string integer2string(const int n);$/;"	p	signature:(const int n)
ip	component/protocolModule/HttpModule.h	/^	char ip[16];$/;"	m	class:HttpModule	access:private
is_destroyed	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_destroyed;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
is_disabled	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_disabled;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
is_empty	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::is_empty() {$/;"	f	class:URLFrontier	signature:()
is_empty	component/URLFrontier/URLFrontier.h	/^	bool is_empty();$/;"	p	class:URLFrontier	access:public	signature:()
is_empty	util/btree-m/avl_tree.h	/^    bool is_empty(void) { return(abs.root == null()); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
is_writer	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_writer;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
iter	util/btree-m/avl_tree.h	/^	iter(void) { depth = ~0; }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
iter	util/btree-m/avl_tree.h	/^    class iter$/;"	c	class:abstract_container::base_avl_tree	access:public
j	Session.vim	/^nnoremap <buffer> j gj$/;"	m
k	Session.vim	/^nnoremap <buffer> k gk$/;"	m
key	util/btree-m/avl_ex1.cpp	/^		typedef const long long key;$/;"	t	struct:env::abstr	file:	access:public
key	util/btree-m/avl_tree.h	/^    typedef typename abstractor::key key;$/;"	t	class:abstract_container::base_avl_tree	access:public
key	util/lru/Basic_LRU.h	/^	long long int key;$/;"	m	struct:__anon1	access:public
kv	util/lru/Basic_LRU.h	/^	LRU_KV kv;$/;"	m	struct:page	access:public
lt	util/btree-m/avl_ex1.cpp	/^		node *gt, *lt;$/;"	m	struct:env::node	file:	access:public
m_counter	component/ContentSeen/ContentSeen.h	/^	int m_counter;$/;"	m	class:ContentSeen	access:private
main	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	crawler.cpp	/^int main() {$/;"	f	signature:()
makeSure	util/btree-f/btree.cpp	/^void BTTableClass::makeSure() {$/;"	f	class:BTTableClass	signature:()
makeSure	util/btree-f/btree.h	/^      void makeSure();$/;"	p	class:BTTableClass	access:public	signature:()
max_cache	util/lru/Basic_LRU.h	/^	const int max_cache;$/;"	m	class:Basic_LRU	access:private
min	component/LinkExtractor/LinkExtractor.h	/^	inline int min(int a , int b){return a>b? b: a;}$/;"	f	class:LinkExtractor	access:private	signature:(int a , int b)
min	component/Writer/Writer.h	/^        inline int min(int a, int b) {$/;"	f	class:Writer	access:public	signature:(int a, int b)
mutex	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_mutex_t mutex;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
mutex_assign_thread	crawler.cpp	/^pthread_mutex_t mutex_assign_thread;$/;"	v
mutex_counter	crawler.cpp	/^pthread_mutex_t mutex_counter;$/;"	v
mutex_fetch	component/protocolModule/HttpModule.h	/^	pthread_mutex_t mutex_fetch;$/;"	m	class:HttpModule	access:private
my_debug_print	util/rwlock_fcfs/rwlock.c	51;"	d	file:
my_debug_print	util/rwlock_fcfs/rwlock.c	54;"	d	file:
name	util/btree-m/avl_ex1.cpp	/^		long long name;$/;"	m	struct:env::node	file:	access:public
name	util/btree-m/avl_ex1.cpp	/^	long long name;$/;"	m	struct:__anon2	file:	access:public
newStrChangeC	global.cpp	/^char* newStrChangeC(const char*p, char from, char to, int n) {$/;"	f	signature:(const char*p, char from, char to, int n)
newStrChangeC	global.h	/^char* newStrChangeC(const char*p, char from, char to, int n);$/;"	p	signature:(const char*p, char from, char to, int n)
next	util/lru/Basic_LRU.h	/^	struct page* next;$/;"	m	struct:page	typeref:struct:page::page	access:public
next	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    struct pthread_rwlock_fcfs_queue_item_struct * next;$/;"	m	struct:pthread_rwlock_fcfs_queue_item_struct	typeref:struct:pthread_rwlock_fcfs_queue_item_struct::pthread_rwlock_fcfs_queue_item_struct	access:public
noMoreMemory	crawler.cpp	/^void noMoreMemory() {$/;"	f	signature:()
node	util/btree-m/avl_ex1.cpp	/^	struct node {$/;"	s	class:env	file:	access:private
nodetype	component/ContentSeen/ContentSeen.h	/^	NodeType nodetype;$/;"	m	class:ContentSeen	access:private
nodetype	component/URLSeen/URLSeen.h	/^	NodeType nodetype;$/;"	m	class:URLSeen	access:private
null	util/btree-m/avl_ex1.cpp	/^		static handle null(void) {$/;"	f	struct:env::abstr	access:public	signature:(void)
null	util/btree-m/avl_tree.h	/^	handle null(void) { return(tree_->abs.null()); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:protected	signature:(void)
null	util/btree-m/avl_tree.h	/^    handle null(void) { return(abs.null()); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(void)
num	component/LinkExtractor/LinkExtractor.h	/^	int num;\/\/ÂÜÖÂ≠òÂ§ßÂ∞è$/;"	m	class:LinkExtractor	access:private
num_msgs	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    int num_msgs;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
num_pending_readers	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_pending_readers;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
num_readers	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_readers;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
num_threads	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_threads;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
operator *	util/btree-m/avl_tree.h	/^	handle operator * (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
operator ++	util/btree-m/avl_tree.h	/^	void operator ++ (int) { ++(*this); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(int)
operator ++	util/btree-m/avl_tree.h	/^	void operator ++ (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
operator --	util/btree-m/avl_tree.h	/^	void operator -- (int) { --(*this); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(int)
operator --	util/btree-m/avl_tree.h	/^	void operator -- (void)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
p	Session.vim	/^nnoremap <buffer> p :wincmd p$/;"	m
p	component/Writer/Writer.h	/^        struct tm *p;$/;"	m	class:Writer	typeref:struct:Writer::tm	access:private
p_rwlock_btree	component/URLSeen/URLSeen.h	/^	pthread_rwlock_t \/*p_rwlock_cache,*\/ p_rwlock_btree;$/;"	m	class:URLSeen	access:private
p_rwlock_f	component/ContentSeen/ContentSeen.h	/^	pthread_rwlock_t p_rwlock_f;$/;"	m	class:ContentSeen	access:private
p_rwlock_m	component/ContentSeen/ContentSeen.h	/^	pthread_rwlock_t p_rwlock_m;$/;"	m	class:ContentSeen	access:private
page	util/lru/Basic_LRU.h	/^typedef struct page{$/;"	s
page::kv	util/lru/Basic_LRU.h	/^	LRU_KV kv;$/;"	m	struct:page	access:public
page::next	util/lru/Basic_LRU.h	/^	struct page* next;$/;"	m	struct:page	typeref:struct:page::page	access:public
page::prev	util/lru/Basic_LRU.h	/^	struct page* prev;$/;"	m	struct:page	typeref:struct:page::page	access:public
page_link	global.h	/^struct page_link {$/;"	s
page_link::_host_addr	global.h	/^	char _host_addr[256];$/;"	m	struct:page_link	access:public
page_link::_host_file	global.h	/^	char _host_file[1024];$/;"	m	struct:page_link	access:public
page_link::_portnumber	global.h	/^	int _portnumber;$/;"	m	struct:page_link	access:public
pagecounter	crawler.cpp	/^int pagecounter = 0;$/;"	v
path_h	util/btree-m/avl_tree.h	/^	handle path_h[max_depth - 1];$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
pkgDNS	component/DNS_Resolver/TinyDNSResolver.cpp	/^int TinyDNSResolver::pkgDNS(const char* domain, DNS_PKG_HEADER_PTR& nphp,$/;"	f	class:TinyDNSResolver	signature:(const char* domain, DNS_PKG_HEADER_PTR& nphp, DNS_PKG_QUERY_PTR& dkqp, unsigned char* dnsBuff, unsigned short id)
pkgDNS	component/DNS_Resolver/TinyDNSResolver.h	/^	int pkgDNS(const char*, DNS_PKG_HEADER_PTR&, DNS_PKG_QUERY_PTR&, unsigned char*,unsigned short);$/;"	p	class:TinyDNSResolver	access:private	signature:(const char*, DNS_PKG_HEADER_PTR&, DNS_PKG_QUERY_PTR&, unsigned char*,unsigned short)
pl	component/protocolModule/HttpModule.h	/^	struct page_link pl;$/;"	m	struct:threadPara	typeref:struct:threadPara::page_link	access:public
prev	util/lru/Basic_LRU.h	/^	struct page* prev;$/;"	m	struct:page	typeref:struct:page::page	access:public
print	util/thread_print/thread_print.cpp	/^void Thread_print::print(const char* fmt, ...)$/;"	f	class:Thread_print	signature:(const char* fmt, ...)
print	util/thread_print/thread_print.h	/^	void print(const char*, ...);$/;"	p	class:Thread_print	access:public	signature:(const char*, ...)
pthread_rwlock_fcfs_alloc	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern pthread_rwlock_fcfs_t * pthread_rwlock_fcfs_alloc(void);$/;"	p	signature:(void)
pthread_rwlock_fcfs_alloc	util/rwlock_fcfs/rwlock.c	/^pthread_rwlock_fcfs_t * pthread_rwlock_fcfs_alloc(void)$/;"	f	signature:(void)
pthread_rwlock_fcfs_destroy	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern void pthread_rwlock_fcfs_destroy(pthread_rwlock_fcfs_t * rwlock);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock)
pthread_rwlock_fcfs_destroy	util/rwlock_fcfs/rwlock.c	/^extern void pthread_rwlock_fcfs_destroy(pthread_rwlock_fcfs_t * rwlock)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock)
pthread_rwlock_fcfs_gain_read	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_gain_read(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_gain_read	util/rwlock_fcfs/rwlock.c	/^int pthread_rwlock_fcfs_gain_read(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_gain_write	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_gain_write(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_gain_write	util/rwlock_fcfs/rwlock.c	/^int pthread_rwlock_fcfs_gain_write(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_item_struct	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^struct pthread_rwlock_fcfs_item_struct$/;"	s
pthread_rwlock_fcfs_item_struct::cond	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_cond_t cond;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
pthread_rwlock_fcfs_item_struct::is_disabled	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_disabled;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
pthread_rwlock_fcfs_item_struct::is_writer	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_writer;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
pthread_rwlock_fcfs_item_struct::num_threads	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_threads;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
pthread_rwlock_fcfs_item_struct::was_first_thr_accepted	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int was_first_thr_accepted;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
pthread_rwlock_fcfs_item_t	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^typedef struct pthread_rwlock_fcfs_item_struct pthread_rwlock_fcfs_item_t;$/;"	t	typeref:struct:pthread_rwlock_fcfs_item_struct
pthread_rwlock_fcfs_queue_alloc	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern pthread_rwlock_fcfs_queue_t * pthread_rwlock_fcfs_queue_alloc(void);$/;"	p	signature:(void)
pthread_rwlock_fcfs_queue_alloc	util/rwlock_fcfs/queue.c	/^pthread_rwlock_fcfs_queue_t * pthread_rwlock_fcfs_queue_alloc(void)$/;"	f	signature:(void)
pthread_rwlock_fcfs_queue_dequeue	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern void * pthread_rwlock_fcfs_queue_dequeue(pthread_rwlock_fcfs_queue_t * queue);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_dequeue	util/rwlock_fcfs/queue.c	/^void * pthread_rwlock_fcfs_queue_dequeue(pthread_rwlock_fcfs_queue_t * queue)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_destroy	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern void pthread_rwlock_fcfs_queue_destroy(pthread_rwlock_fcfs_queue_t * queue);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_destroy	util/rwlock_fcfs/queue.c	/^void pthread_rwlock_fcfs_queue_destroy(pthread_rwlock_fcfs_queue_t * queue)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_enqueue	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern void pthread_rwlock_fcfs_queue_enqueue(pthread_rwlock_fcfs_queue_t * queue, void * msg);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue, void * msg)
pthread_rwlock_fcfs_queue_enqueue	util/rwlock_fcfs/queue.c	/^void pthread_rwlock_fcfs_queue_enqueue(pthread_rwlock_fcfs_queue_t * queue, void * msg)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue, void * msg)
pthread_rwlock_fcfs_queue_is_empty	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern int pthread_rwlock_fcfs_queue_is_empty(pthread_rwlock_fcfs_queue_t * queue);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_is_empty	util/rwlock_fcfs/queue.c	/^int pthread_rwlock_fcfs_queue_is_empty(pthread_rwlock_fcfs_queue_t * queue)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_item_struct	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^struct pthread_rwlock_fcfs_queue_item_struct$/;"	s
pthread_rwlock_fcfs_queue_item_struct::data	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    void * data;$/;"	m	struct:pthread_rwlock_fcfs_queue_item_struct	access:public
pthread_rwlock_fcfs_queue_item_struct::next	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    struct pthread_rwlock_fcfs_queue_item_struct * next;$/;"	m	struct:pthread_rwlock_fcfs_queue_item_struct	typeref:struct:pthread_rwlock_fcfs_queue_item_struct::pthread_rwlock_fcfs_queue_item_struct	access:public
pthread_rwlock_fcfs_queue_item_t	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^typedef struct pthread_rwlock_fcfs_queue_item_struct pthread_rwlock_fcfs_queue_item_t;$/;"	t	typeref:struct:pthread_rwlock_fcfs_queue_item_struct
pthread_rwlock_fcfs_queue_peak	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern void * pthread_rwlock_fcfs_queue_peak(pthread_rwlock_fcfs_queue_t * queue);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_peak	util/rwlock_fcfs/queue.c	/^void * pthread_rwlock_fcfs_queue_peak(pthread_rwlock_fcfs_queue_t * queue)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_peak_tail	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^extern void * pthread_rwlock_fcfs_queue_peak_tail(pthread_rwlock_fcfs_queue_t * queue);$/;"	p	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_peak_tail	util/rwlock_fcfs/queue.c	/^void * pthread_rwlock_fcfs_queue_peak_tail(pthread_rwlock_fcfs_queue_t * queue)$/;"	f	signature:(pthread_rwlock_fcfs_queue_t * queue)
pthread_rwlock_fcfs_queue_struct	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^struct pthread_rwlock_fcfs_queue_struct$/;"	s
pthread_rwlock_fcfs_queue_struct::head	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    pthread_rwlock_fcfs_queue_item_t * head;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
pthread_rwlock_fcfs_queue_struct::num_msgs	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    int num_msgs;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
pthread_rwlock_fcfs_queue_struct::tail	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    pthread_rwlock_fcfs_queue_item_t * tail;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
pthread_rwlock_fcfs_queue_t	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^typedef struct pthread_rwlock_fcfs_queue_struct pthread_rwlock_fcfs_queue_t;$/;"	t	typeref:struct:pthread_rwlock_fcfs_queue_struct
pthread_rwlock_fcfs_release	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern void pthread_rwlock_fcfs_release(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_release	util/rwlock_fcfs/rwlock.c	/^extern void pthread_rwlock_fcfs_release(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_status	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^enum pthread_rwlock_fcfs_status$/;"	g
pthread_rwlock_fcfs_struct	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^struct pthread_rwlock_fcfs_struct$/;"	s
pthread_rwlock_fcfs_struct::is_destroyed	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int is_destroyed;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
pthread_rwlock_fcfs_struct::mutex	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_mutex_t mutex;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
pthread_rwlock_fcfs_struct::num_pending_readers	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_pending_readers;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
pthread_rwlock_fcfs_struct::num_readers	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int num_readers;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
pthread_rwlock_fcfs_struct::queue	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_rwlock_fcfs_queue_t * queue;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
pthread_rwlock_fcfs_struct::status	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    enum pthread_rwlock_fcfs_status status;$/;"	m	struct:pthread_rwlock_fcfs_struct	typeref:enum:pthread_rwlock_fcfs_struct::pthread_rwlock_fcfs_status	access:public
pthread_rwlock_fcfs_t	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^typedef struct pthread_rwlock_fcfs_struct pthread_rwlock_fcfs_t;$/;"	t	typeref:struct:pthread_rwlock_fcfs_struct
pthread_rwlock_fcfs_timed_gain_read	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_timed_gain_read($/;"	p	signature:( pthread_rwlock_fcfs_t * rwlock, const struct timespec * abstime, int (*continue_callback)(void * context), void * context PTHREAD_RWLOCK_FCFS_DEBUG_ARGS )
pthread_rwlock_fcfs_timed_gain_read	util/rwlock_fcfs/rwlock.c	/^int pthread_rwlock_fcfs_timed_gain_read($/;"	f	signature:( pthread_rwlock_fcfs_t * rwlock, const struct timespec * abstime, int (*continue_callback)(void * context), void * context PTHREAD_RWLOCK_FCFS_DEBUG_ARGS )
pthread_rwlock_fcfs_timed_gain_write	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_timed_gain_write($/;"	p	signature:( pthread_rwlock_fcfs_t * rwlock, const struct timespec * abstime, int (*continue_callback)(void * context), void * context PTHREAD_RWLOCK_FCFS_DEBUG_ARGS )
pthread_rwlock_fcfs_timed_gain_write	util/rwlock_fcfs/rwlock.c	/^    pthread_rwlock_fcfs_timed_gain_write($/;"	f	signature:( pthread_rwlock_fcfs_t * rwlock, const struct timespec * abstime, int (*continue_callback)(void * context), void * context PTHREAD_RWLOCK_FCFS_DEBUG_ARGS )
pthread_rwlock_fcfs_try_gain_read	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_try_gain_read(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_try_gain_read	util/rwlock_fcfs/rwlock.c	/^int pthread_rwlock_fcfs_try_gain_read(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_try_gain_write	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^extern int pthread_rwlock_fcfs_try_gain_write(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS);$/;"	p	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
pthread_rwlock_fcfs_try_gain_write	util/rwlock_fcfs/rwlock.c	/^int pthread_rwlock_fcfs_try_gain_write(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)$/;"	f	signature:(pthread_rwlock_fcfs_t * rwlock PTHREAD_RWLOCK_FCFS_DEBUG_ARGS)
purge	util/btree-m/avl_tree.h	/^    void purge(void) { abs.root = null(); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
qlock	component/URLFrontier/URLFrontier.h	/^	pthread_mutex_t qlock;$/;"	m	class:URLFrontier	access:private
questions	component/DNS_Resolver/TinyDNSResolver.h	/^	unsigned short questions;$/;"	m	struct:__anon7	access:public
queue	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    pthread_rwlock_fcfs_queue_t * queue;$/;"	m	struct:pthread_rwlock_fcfs_struct	access:public
rabin	component/ContentSeen/ContentSeen.h	/^	RabinHashFunction64 rabin;$/;"	m	class:ContentSeen	access:private
rabin	component/URLSeen/URLSeen.h	/^	RabinHashFunction64 rabin;$/;"	m	class:URLSeen	access:private
rabin_global	global.cpp	/^RabinHashFunction64 rabin_global(HASH_SEED);$/;"	p	file:	signature:(HASH_SEED)
re_counter	component/URLFilter/URLFilter.h	/^	int			 re_counter;$/;"	m	class:URLFilter	access:private
re_f	component/URLFilter/URLFilter.h	/^	regex_t re_f[MAX_FILTER];$/;"	m	class:URLFilter	access:private
readURL	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::readURL(struct page_link* result) {$/;"	f	class:URLFrontier	signature:(struct page_link* result)
readURL	component/URLFrontier/URLFrontier.h	/^	bool readURL(struct page_link*);$/;"	p	class:URLFrontier	access:public	signature:(struct page_link*)
read_error	util/btree-m/avl_ex1.cpp	/^		static bool read_error(void) {$/;"	f	struct:env::abstr	access:public	signature:(void)
read_error	util/btree-m/avl_tree.h	/^	bool read_error(void) { return(tree_->read_error()); }$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(void)
read_error	util/btree-m/avl_tree.h	/^    bool read_error(void) { return(abs.read_error()); }$/;"	f	class:abstract_container::base_avl_tree	access:public	signature:(void)
recvAnalyse	component/DNS_Resolver/TinyDNSResolver.cpp	/^bool TinyDNSResolver::recvAnalyse(unsigned char* buf, size_t buf_size,$/;"	f	class:TinyDNSResolver	signature:(unsigned char* buf, size_t buf_size, size_t send_size, char* ip)
recvAnalyse	component/DNS_Resolver/TinyDNSResolver.h	/^	bool recvAnalyse(unsigned char*, size_t, size_t, char*);$/;"	p	class:TinyDNSResolver	access:private	signature:(unsigned char*, size_t, size_t, char*)
recvfromTimeOut	component/DNS_Resolver/TinyDNSResolver.cpp	/^int TinyDNSResolver::recvfromTimeOut(int socket, long sec, long usec) {$/;"	f	class:TinyDNSResolver	signature:(int socket, long sec, long usec)
recvfromTimeOut	component/DNS_Resolver/TinyDNSResolver.h	/^	int recvfromTimeOut(int socket, long sec, long usec);$/;"	p	class:TinyDNSResolver	access:private	signature:(int socket, long sec, long usec)
regex	component/LinkExtractor/LinkExtractor.h	/^	regex_t regex;$/;"	m	class:LinkExtractor	access:private
regex	component/URLFilter/URLFilter.h	/^	char         regex[1024];$/;"	m	class:URLFilter	access:private
releaseFileLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::releaseFileLock() {$/;"	f	class:URLFrontier	signature:()
releaseFileLock	component/URLFrontier/URLFrontier.h	/^	void releaseFileLock();$/;"	p	class:URLFrontier	access:private	signature:()
releaseLock	component/URLFrontier/URLFrontier.cpp	/^void URLFrontier::releaseLock() {$/;"	f	class:URLFrontier	signature:()
releaseLock	component/URLFrontier/URLFrontier.h	/^	void releaseLock();$/;"	p	class:URLFrontier	access:private	signature:()
releaseLock_f	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::releaseLock_f() {$/;"	f	class:ContentSeen	signature:()
releaseLock_f	component/ContentSeen/ContentSeen.h	/^	bool releaseLock_f();$/;"	p	class:ContentSeen	access:private	signature:()
releaseLock_file	component/URLSeen/URLSeen.cpp	/^bool URLSeen::releaseLock_file() {$/;"	f	class:URLSeen	signature:()
releaseLock_file	component/URLSeen/URLSeen.h	/^	bool releaseLock_file();$/;"	p	class:URLSeen	access:private	signature:()
releaseLock_m	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::releaseLock_m() {$/;"	f	class:ContentSeen	signature:()
releaseLock_m	component/ContentSeen/ContentSeen.h	/^	bool releaseLock_m();$/;"	p	class:ContentSeen	access:private	signature:()
remove	util/btree-m/avl_tree.h	/^    inline handle remove(key k);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(key k)
remove	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::remove(key k)$/;"	f	class:abstract_container::base_avl_tree	signature:(key k)
remove_junk_from_head_of_queue	util/rwlock_fcfs/rwlock.c	/^static void remove_junk_from_head_of_queue(pthread_rwlock_fcfs_t * rwlock)$/;"	f	file:	signature:(pthread_rwlock_fcfs_t * rwlock)
resolve	component/DNS_Resolver/TinyDNSResolver.cpp	/^bool TinyDNSResolver::resolve(const char* domain, char* ip, unsigned short id) {$/;"	f	class:TinyDNSResolver	signature:(const char* domain, char* ip, unsigned short id)
resolve	component/DNS_Resolver/TinyDNSResolver.h	/^	bool resolve(const char*, char* ip, unsigned short id);$/;"	p	class:TinyDNSResolver	access:public	signature:(const char*, char* ip, unsigned short id)
rewindPtr	component/ris/ris.cpp	/^void RIS::rewindPtr(){$/;"	f	class:RIS	signature:()
rewindPtr	component/ris/ris.h	/^	void rewindPtr(void);$/;"	p	class:RIS	access:public	signature:(void)
rio_readn	util/rio/rio.cpp	/^ssize_t rio_readn(int fd, void* usrbuf, size_t n) {$/;"	f	signature:(int fd, void* usrbuf, size_t n)
rio_readn	util/rio/rio.h	/^ssize_t rio_readn (int fd, void* usrbuf, size_t n);$/;"	p	signature:(int fd, void* usrbuf, size_t n)
rio_readn_chunked	util/rio/rio.cpp	/^ssize_t rio_readn_chunked(int fd, void*usrbuf, size_t n){$/;"	f	signature:(int fd, void*usrbuf, size_t n)
rio_readn_chunked	util/rio/rio.h	/^ssize_t rio_readn_chunked(int fd, void*usrbuf, size_t n);$/;"	p	signature:(int fd, void*usrbuf, size_t n)
rio_writen	util/rio/rio.cpp	/^ssize_t rio_writen(int fd, void* usrbuf, size_t n) {$/;"	f	signature:(int fd, void* usrbuf, size_t n)
rio_writen	util/rio/rio.h	/^ssize_t rio_writen(int fd, void* usrbuf, size_t n);$/;"	p	signature:(int fd, void* usrbuf, size_t n)
root	util/btree-m/avl_tree.h	/^	handle root;$/;"	m	struct:abstract_container::base_avl_tree::abs_plus_root	access:public
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 16 - ((6 * winheight(0) + 10) \/ 20)$/;"	v
s:l	Session.vim	/^let s:l = 68 - ((34 * winheight(0) + 11) \/ 22)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
search	util/btree-m/avl_tree.h	/^    inline handle search(key k, search_type st = EQUAL);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(key k, search_type st = EQUAL)
search	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search(key k, search_type st)$/;"	f	class:abstract_container::base_avl_tree	signature:(key k, search_type st)
search_greatest	util/btree-m/avl_tree.h	/^    inline handle search_greatest(void);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(void)
search_greatest	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search_greatest(void)$/;"	f	class:abstract_container::base_avl_tree	signature:(void)
search_least	util/btree-m/avl_tree.h	/^    inline handle search_least(void);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(void)
search_least	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::search_least(void)$/;"	f	class:abstract_container::base_avl_tree	signature:(void)
search_type	util/btree-m/avl_tree.h	/^enum search_type$/;"	g	namespace:abstract_container
server_addr	component/protocolModule/HttpModule.h	/^	struct sockaddr_in server_addr;$/;"	m	class:HttpModule	typeref:struct:HttpModule::sockaddr_in	access:private
set	util/btree-m/avl_ex1.cpp	/^	void set(const long long name, const int value) {$/;"	f	class:env	access:public	signature:(const long long name, const int value)
setCurrentNode	util/btree-f/btree.cpp	/^void BTTableClass::setCurrentNode(NodeType nt){$/;"	f	class:BTTableClass	signature:(NodeType nt)
setCurrentNode	util/btree-f/btree.h	/^      void setCurrentNode(NodeType);$/;"	p	class:BTTableClass	access:public	signature:(NodeType)
setNumItems	util/btree-f/btree.cpp	/^void BTTableClass::setNumItems(long size){$/;"	f	class:BTTableClass	signature:(long size)
setNumItems	util/btree-f/btree.h	/^      void setNumItems(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
setNumNodes	util/btree-f/btree.cpp	/^void BTTableClass::setNumNodes(long size){$/;"	f	class:BTTableClass	signature:(long size)
setNumNodes	util/btree-f/btree.h	/^      void setNumNodes(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
setRoot	util/btree-f/btree.cpp	/^void BTTableClass::setRoot(long  root){$/;"	f	class:BTTableClass	signature:(long root)
setRoot	util/btree-f/btree.h	/^      void setRoot(long);$/;"	p	class:BTTableClass	access:public	signature:(long)
set_bf	util/btree-m/avl_tree.h	/^    void set_bf(handle h, int bf) { }\/\/abs.set_balance_factor(h, bf); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, int bf)
set_greater	util/btree-m/avl_ex1.cpp	/^		static void set_greater(handle h, handle gh) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, handle gh)
set_gt	util/btree-m/avl_tree.h	/^    void set_gt(handle h, handle gh) { abs.set_greater(h, gh); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, handle gh)
set_less	util/btree-m/avl_ex1.cpp	/^		static void set_less(handle h, handle lh) {$/;"	f	struct:env::abstr	access:public	signature:(handle h, handle lh)
set_lt	util/btree-m/avl_tree.h	/^    void set_lt(handle h, handle lh) { abs.set_less(h, lh); }$/;"	f	class:abstract_container::base_avl_tree	access:protected	signature:(handle h, handle lh)
sighandler	crawler.cpp	/^void sighandler(int s) {$/;"	f	signature:(int s)
size	util/btree-m/avl_ex1.cpp	/^		typedef unsigned size;$/;"	t	struct:env::abstr	file:	access:public
size	util/btree-m/avl_tree.h	/^    typedef typename abstractor::size size;$/;"	t	class:abstract_container::base_avl_tree	access:public
sockfd	component/protocolModule/HttpModule.h	/^	int sockfd;$/;"	m	class:HttpModule	access:private
start_iter	util/btree-m/avl_tree.h	/^	void start_iter(base_avl_tree &tree, key k, search_type st = EQUAL)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree, key k, search_type st = EQUAL)
start_iter_greatest	util/btree-m/avl_tree.h	/^	void start_iter_greatest(base_avl_tree &tree)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree)
start_iter_least	util/btree-m/avl_tree.h	/^	void start_iter_least(base_avl_tree &tree)$/;"	f	class:abstract_container::base_avl_tree::iter	access:public	signature:(base_avl_tree &tree)
status	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    enum pthread_rwlock_fcfs_status status;$/;"	m	struct:pthread_rwlock_fcfs_struct	typeref:enum:pthread_rwlock_fcfs_struct::pthread_rwlock_fcfs_status	access:public
stime	component/Writer/Writer.h	/^        char stime[128];$/;"	m	class:Writer	access:private
subst	util/btree-m/avl_tree.h	/^    inline handle subst(handle new_node);$/;"	p	class:abstract_container::base_avl_tree	access:public	signature:(handle new_node)
subst	util/btree-m/avl_tree.h	/^  base_avl_tree<abstractor, max_depth, bset>::subst(handle new_node)$/;"	f	class:abstract_container::base_avl_tree	signature:(handle new_node)
table32	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table40	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table48	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table56	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table64	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table72	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table80	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
table88	util/RabinHash/rabinhash64.h	/^	    long long *table32, *table40, *table48, *table56, *table64, *table72, *table80, *table88;$/;"	m	class:RabinHashFunction64	access:private
tail	util/rwlock_fcfs/pthread/rwlock_fcfs_queue.h	/^    pthread_rwlock_fcfs_queue_item_t * tail;$/;"	m	struct:pthread_rwlock_fcfs_queue_struct	access:public
tail_pointer	util/lru/Basic_LRU.h	/^	PCACHE_PAGE tail_pointer;$/;"	m	class:Basic_LRU	access:private
test	util/lru/Basic_LRU.cpp	/^void Basic_LRU::test() {$/;"	f	class:Basic_LRU	signature:()
test	util/lru/Basic_LRU.h	/^	void test();$/;"	p	class:Basic_LRU	access:public	signature:()
threadPara	component/protocolModule/HttpModule.h	/^struct threadPara {$/;"	s
threadPara::bigbuf	component/protocolModule/HttpModule.h	/^	char* bigbuf;$/;"	m	struct:threadPara	access:public
threadPara::buffer	component/protocolModule/HttpModule.h	/^	char* buffer;$/;"	m	struct:threadPara	access:public
threadPara::flag	component/protocolModule/HttpModule.h	/^	int flag;$/;"	m	struct:threadPara	access:public
threadPara::pl	component/protocolModule/HttpModule.h	/^	struct page_link pl;$/;"	m	struct:threadPara	typeref:struct:threadPara::page_link	access:public
threadPara::tid	component/protocolModule/HttpModule.h	/^	int tid;$/;"	m	struct:threadPara	access:public
thread_LaunchMemberFunction	component/protocolModule/HttpModule.cpp	/^void* thread_LaunchMemberFunction(void*obj) {$/;"	f	signature:(void*obj)
thread_LaunchMemberFunction	component/protocolModule/HttpModule.h	/^void* thread_LaunchMemberFunction(void*);$/;"	p	signature:(void*)
thread_work	crawler.cpp	/^void * thread_work(void* attr) {$/;"	f	signature:(void* attr)
threadtofetch	component/protocolModule/HttpModule.cpp	/^void* HttpModule::threadtofetch(void* p_attr) {$/;"	f	class:HttpModule	signature:(void* p_attr)
threadtofetch	component/protocolModule/HttpModule.h	/^	void* threadtofetch(void*);$/;"	p	class:HttpModule	access:public	signature:(void*)
tid	component/ContentSeen/ContentSeen.h	/^	int tid;$/;"	m	class:ContentSeen	access:private
tid	component/URLFilter/URLFilter.h	/^	int tid;$/;"	m	class:URLFilter	access:private
tid	component/URLFrontier/URLFrontier.h	/^	int tid;$/;"	m	class:URLFrontier	access:private
tid	component/URLSeen/URLSeen.h	/^	int tid;$/;"	m	class:URLSeen	access:private
tid	component/Writer/Writer.h	/^        int tid;$/;"	m	class:Writer	access:private
tid	component/protocolModule/HttpModule.h	/^	int tid;$/;"	m	class:HttpModule	access:private
tid	component/protocolModule/HttpModule.h	/^	int tid;$/;"	m	struct:threadPara	access:public
tid	util/thread_print/thread_print.h	/^	int tid;$/;"	m	class:Thread_print	access:private
timep	component/Writer/Writer.h	/^        time_t timep;$/;"	m	class:Writer	access:private
tp	component/URLFilter/URLFilter.h	/^	Thread_print tp;$/;"	m	class:URLFilter	access:private
tp	component/URLFrontier/URLFrontier.h	/^	Thread_print tp;$/;"	m	class:URLFrontier	access:private
tp	component/URLSeen/URLSeen.h	/^	Thread_print tp;$/;"	m	class:URLSeen	access:private
tp	component/Writer/Writer.h	/^        Thread_print tp;$/;"	m	class:Writer	access:private
tp	component/protocolModule/HttpModule.h	/^	Thread_print tp;\/\/Á∫øÁ®ãÊâìÂç∞Âà∞Êñá‰ª∂$/;"	m	class:HttpModule	access:private
tp	component/protocolModule/HttpModule.h	/^	struct threadPara* tp;$/;"	m	struct:Wrapper_t	typeref:struct:Wrapper_t::threadPara	access:public
tr	component/protocolModule/HttpModule.h	/^	TinyDNSResolver tr;$/;"	m	class:HttpModule	access:private
tree	util/btree-m/avl_ex1.cpp	/^	tree_t tree;$/;"	m	class:env	file:	access:private
tree_	util/btree-m/avl_tree.h	/^	base_avl_tree *tree_;$/;"	m	class:abstract_container::base_avl_tree::iter	access:protected
tree_t	util/btree-m/avl_ex1.cpp	/^	typedef abstract_container::avl_tree<abstr> tree_t;$/;"	t	class:env	file:	access:private
url_hash	global.h	/^struct url_hash {$/;"	s
url_hash::file_hash	global.h	/^	long long file_hash;$/;"	m	struct:url_hash	access:public
url_hash::host_hash	global.h	/^	long long host_hash;$/;"	m	struct:url_hash	access:public
url_queue	component/URLFrontier/URLFrontier.h	/^	std::queue<struct page_link> url_queue;$/;"	m	class:URLFrontier	access:private
urlseen_vector	crawler.cpp	/^vector<URLSeen*> urlseen_vector;$/;"	v
value	util/btree-m/avl_ex1.cpp	/^		int value;$/;"	m	struct:env::node	file:	access:public
value	util/btree-m/avl_ex1.cpp	/^	int value;$/;"	m	struct:__anon2	file:	access:public
value	util/lru/Basic_LRU.h	/^	int value;$/;"	m	struct:__anon1	access:public
was_first_thr_accepted	util/rwlock_fcfs/pthread/rwlock_fcfs.h	/^    int was_first_thr_accepted;$/;"	m	struct:pthread_rwlock_fcfs_item_struct	access:public
write2file	component/ContentSeen/ContentSeen.cpp	/^bool ContentSeen::write2file() {$/;"	f	class:ContentSeen	signature:()
write2file	component/ContentSeen/ContentSeen.h	/^	bool write2file();$/;"	p	class:ContentSeen	access:private	signature:()
write2file	component/URLFrontier/URLFrontier.cpp	/^bool URLFrontier::write2file() {$/;"	f	class:URLFrontier	signature:()
write2file	component/URLFrontier/URLFrontier.h	/^	bool write2file();$/;"	p	class:URLFrontier	access:private	signature:()
writeHeader	component/Writer/Writer.cpp	/^bool Writer::writeHeader(int tid, char* buf, struct page_link* p_pl, char* p_ip, int size) {$/;"	f	class:Writer	signature:(int tid, char* buf, struct page_link* p_pl, char* p_ip, int size)
writeHeader	component/Writer/Writer.h	/^        bool writeHeader(int tid, char* buf, struct page_link *p_pl, char* p_ip, int size = 16);\/\/writeHeader must be used after WriteIt, because WriteIt function call fill_filename funticon to fill filename which is used by writeheader$/;"	p	class:Writer	access:private	signature:(int tid, char* buf, struct page_link *p_pl, char* p_ip, int size = 16)
writeLocal	component/Writer/Writer.cpp	/^bool Writer::writeLocal(int tid, struct page_link* pl, char* p_ip,RIS& ris , const char * vaildstr, int size) $/;"	f	class:Writer	signature:(int tid, struct page_link* pl, char* p_ip,RIS& ris , const char * vaildstr, int size)
writeLocal	component/Writer/Writer.h	/^        bool writeLocal(int tid, struct page_link* pl, char * p_ip, RIS& ris, const char * vaildstr="200 OK", int size = 16);$/;"	p	class:Writer	access:public	signature:(int tid, struct page_link* pl, char * p_ip, RIS& ris, const char * vaildstr=”, int size = 16)
writer_month	component/Writer/Writer.cpp	/^const char * Writer::writer_month[12] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",$/;"	m	class:Writer	file:
writer_month	component/Writer/Writer.h	/^        static const char * writer_month[12];$/;"	m	class:Writer	access:private
writer_wday	component/Writer/Writer.cpp	/^const char * Writer::writer_wday[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	class:Writer	file:
writer_wday	component/Writer/Writer.h	/^        static const char * writer_wday[7];$/;"	m	class:Writer	access:private
zo	Session.vim	/^normal zo$/;"	m
zt	Session.vim	/^normal! zt$/;"	m
~BTTableClass	util/btree-f/btree.cpp	/^BTTableClass::~BTTableClass(void) {$/;"	f	class:BTTableClass	signature:(void)
~BTTableClass	util/btree-f/btree.h	/^      ~BTTableClass(void);$/;"	p	class:BTTableClass	access:public	signature:(void)
~Basic_LRU	util/lru/Basic_LRU.cpp	/^Basic_LRU::~Basic_LRU() {$/;"	f	class:Basic_LRU	signature:()
~Basic_LRU	util/lru/Basic_LRU.h	/^	~Basic_LRU();$/;"	p	class:Basic_LRU	access:public	signature:()
~ContentSeen	component/ContentSeen/ContentSeen.cpp	/^ContentSeen::~ContentSeen() {$/;"	f	class:ContentSeen	signature:()
~ContentSeen	component/ContentSeen/ContentSeen.h	/^	~ContentSeen();$/;"	p	class:ContentSeen	access:public	signature:()
~HttpModule	component/protocolModule/HttpModule.cpp	/^HttpModule::~HttpModule() {$/;"	f	class:HttpModule	signature:()
~HttpModule	component/protocolModule/HttpModule.h	/^	~HttpModule();$/;"	p	class:HttpModule	access:public	signature:()
~LinkExtractor	component/LinkExtractor/LinkExtractor.cpp	/^LinkExtractor::~LinkExtractor() {$/;"	f	class:LinkExtractor	signature:()
~LinkExtractor	component/LinkExtractor/LinkExtractor.h	/^	~LinkExtractor();$/;"	p	class:LinkExtractor	access:public	signature:()
~RIS	component/ris/ris.cpp	/^RIS::~RIS(){$/;"	f	class:RIS	signature:()
~RIS	component/ris/ris.h	/^	~RIS();$/;"	p	class:RIS	access:public	signature:()
~RabinHashFunction64	util/RabinHash/rabinhash64.cpp	/^RabinHashFunction64::~RabinHashFunction64() {$/;"	f	class:RabinHashFunction64	signature:()
~RabinHashFunction64	util/RabinHash/rabinhash64.h	/^	~RabinHashFunction64();$/;"	p	class:RabinHashFunction64	access:public	signature:()
~Thread_print	util/thread_print/thread_print.cpp	/^Thread_print::~Thread_print()$/;"	f	class:Thread_print	signature:()
~Thread_print	util/thread_print/thread_print.h	/^	~Thread_print();$/;"	p	class:Thread_print	access:public	signature:()
~TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.cpp	/^TinyDNSResolver::~TinyDNSResolver() {$/;"	f	class:TinyDNSResolver	signature:()
~TinyDNSResolver	component/DNS_Resolver/TinyDNSResolver.h	/^	~TinyDNSResolver();$/;"	p	class:TinyDNSResolver	access:public	signature:()
~URLFilter	component/URLFilter/URLFilter.cpp	/^URLFilter::~URLFilter() {$/;"	f	class:URLFilter	signature:()
~URLFilter	component/URLFilter/URLFilter.h	/^	~URLFilter();$/;"	p	class:URLFilter	access:public	signature:()
~URLFrontier	component/URLFrontier/URLFrontier.cpp	/^URLFrontier::~URLFrontier() {$/;"	f	class:URLFrontier	signature:()
~URLFrontier	component/URLFrontier/URLFrontier.h	/^	~URLFrontier();$/;"	p	class:URLFrontier	access:public	signature:()
~URLSeen	component/URLSeen/URLSeen.cpp	/^URLSeen::~URLSeen() {$/;"	f	class:URLSeen	signature:()
~URLSeen	component/URLSeen/URLSeen.h	/^	~URLSeen();$/;"	p	class:URLSeen	access:public	signature:()
~Writer	component/Writer/Writer.cpp	/^Writer::~Writer() {$/;"	f	class:Writer	signature:()
~Writer	component/Writer/Writer.h	/^        virtual ~Writer();$/;"	p	class:Writer	access:public	signature:()
¬ç	Session.vim	/^nmap <buffer> <silent> ¬ç $/;"	m
